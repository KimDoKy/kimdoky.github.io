I"<blockquote>
  <p><a href="https://www.feldroy.com/books/two-scoops-of-django-3-x">Two Scoops of Django 3.x</a></p>
</blockquote>

<hr />

<p>Django는 아래 특성에 따른 여러 기본 템플릿 태그와 필터를 제공</p>

<ul>
  <li>모든 기본 템플릿과 태그의 이름은 명확하고 직관적이어야 한다.</li>
  <li>모든 기본 템플릿과 태그는 각각 한 가지 목적만을 수행한다.</li>
  <li>기본 템플릿과 태그는 영속 데이터에 변형을 가하지 않는다.</li>
</ul>

<h2 id="151-filters-are-functions">15.1 Filters Are Functions</h2>

<ul>
  <li>필터는 Django 템플릿 안에서 파이썬을 이용할 수 있게 해주는 데코레이터를 가진 함수</li>
</ul>

<h3 id="1511-filters-are-easy-to-test">15.1.1 Filters Are Easy to Test</h3>

<p>필터 테스트는 테스팅 함수를 제작하는 것으로 간단하게 수행 할 수 있습니다. <a href="">Chap12</a>을 참고</p>

<h3 id="1512-filters-and-code-reuse">15.1.2 Filters and Code Reuse</h3>

<ul>
  <li>대부분의 필터 로직은 다른 라이브러리로부터 상속</li>
  <li>필터 자체를 임포트하면 추상화된 레벨이 하나 더해지므로 추후 디버깅의 복잡도가 올라감</li>
  <li>단순한 로직이 아니라면  <a href="http://utils.py">utils.py</a> 모듈에 모아두는 것을 추천</li>
</ul>

<h3 id="1513-when-to-write-filters">15.1.3 When to Write Filters</h3>

<ul>
  <li>필터는 데이터의 외형을 수정하는데 유용</li>
  <li>REST API와 다른 출력 포맷에서 손쉽게 재사용</li>
</ul>

<h2 id="152-custom-template-tags">15.2 Custom Template Tags</h2>

<p>“Please stop writing so many template tags. They are a pain to debug.”</p>

<p>템플릿 태그와 필터에 너무 많은 로직을 넣는 경우 발생 할 수 있는 문제들</p>

<h3 id="1521-template-tags-are-harder-to-debug">15.2.1 Template Tags Are Harder to Debug</h3>

<ul>
  <li>복잡한 템플릿 태그들은 디버깅하기 까다로움
    <ul>
      <li>태그가 앨리먼트의 시작과 맺음을 포함할 때는 더욱 까다로움</li>
    </ul>
  </li>
  <li>일러한 경우 로그와 테스트를 통해 해결해야 함</li>
</ul>

<h3 id="1522-template-tags-make-code-reuse-harder">15.2.2 Template Tags Make Code Reuse Harder</h3>

<ul>
  <li>템플릿 태그 안의 모든 로직을 <a href="http://utils.py">utils.py</a> 로 옮기는 것을 추천</li>
</ul>

<h3 id="1523-the-performance-cost-of-template-tags">15.2.3 The Performance Cost of Template Tags</h3>

<ul>
  <li>템플릿 태그 안에서 또 다른 템플릿을 로드하는 경우</li>
  <li>커스텀 템플릿 태그가 많은 템플릿을 로드한다면, 캐시하는 방법을 고려
    <ul>
      <li><a href="[https://docs.djangoproject.com/en/3.2/ref/templates/api/#django.template.loaders.cached.Loaderhttps://docs.djangoproject.com/en/3.2/ref/templates/api/#django.template.loaders.cached.Loader](https://docs.djangoproject.com/en/3.2/ref/templates/api/#django.template.loaders.cached.Loader)">docs</a></li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">TEMPLATES</span> <span class="o">=</span> <span class="p">[{</span>
      <span class="s">'BACKEND'</span><span class="p">:</span> <span class="s">'django.template.backends.django.DjangoTemplates'</span><span class="p">,</span>
      <span class="s">'DIRS'</span><span class="p">:</span> <span class="p">[</span><span class="n">BASE_DIR</span> <span class="o">/</span> <span class="s">'templates'</span><span class="p">],</span>
      <span class="s">'OPTIONS'</span><span class="p">:</span> <span class="p">{</span>
          <span class="s">'loaders'</span><span class="p">:</span> <span class="p">[</span>
              <span class="p">(</span><span class="s">'django.template.loaders.cached.Loader'</span><span class="p">,</span> <span class="p">[</span>
                  <span class="s">'django.template.loaders.filesystem.Loader'</span><span class="p">,</span>
                  <span class="s">'django.template.loaders.app_directories.Loader'</span><span class="p">,</span>
                  <span class="s">'path.to.custom.Loader'</span><span class="p">,</span>
              <span class="p">]),</span>
          <span class="p">],</span>
      <span class="p">},</span>
  <span class="p">}]</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="1524-when-to-write-template-tags">15.2.4 When to Write Template Tags</h3>

<p>새로운 템플릿을 추가할 때 고려해야 할 사항</p>

<ul>
  <li>데이터를 읽고 쓰는 작업을 할 것이라면 도멜이나 객체 메서드(object method)가 더 나은 장소일 것이다.</li>
  <li>프로젝트 전반에서 일관된 작명법을 이용하고 있기 때문에 추상화 기반의 클래스 모델을 <code class="language-plaintext highlighter-rouge">core.models</code> 모듈에 추가할 수 있다. 프로젝트의 추상화 기반 클래스 모델에서 어떤 메서드나 프로퍼티가 우리가 작성하려는 커스텀 템플릿 태그와 같은 일을 하는가?</li>
</ul>

<p>새로운 템플릿 태그를 작성하기 좋은 때: HTML을 렌더링하는 작업이 필요할 때</p>

<h2 id="153-naming-your-template-tag-libraries">15.3 Naming Your Template Tag Libraries</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;app_name&gt;_tags.py</code></li>
  <li>템플릿 태그 라이브러리 이름을 앱 이름과 똑같이 지으면 안됨
    <ul>
      <li>템플릿 태그를 로드하는 방식으로 인한 문제 발생</li>
    </ul>
  </li>
</ul>

<h2 id="154-loading-your-template-tag-modules">15.4 Loading Your Template Tag Modules</h2>

<p><code class="language-plaintext highlighter-rouge">{% extends "base.html" %}</code> 바로 다음에 템플릿 태그가 로드되도록 하자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="o">%</span> <span class="n">extends</span> <span class="s">"base.html"</span> <span class="o">%</span><span class="p">}</span>

<span class="p">{</span><span class="o">%</span> <span class="n">load</span> <span class="n">flavors_tags</span> <span class="o">%</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="1541-watch-our-for-this-anti-pattern">15.4.1 Watch Our for This Anti-Pattern</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># settings/base.py
</span><span class="n">TEMPLATES</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'BACKEND'</span><span class="p">:</span> <span class="s">'django.template.backends.django.DjangoTemplates'</span><span class="p">,</span>
    <span class="s">'OPTIONS'</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1"># Don't do this!
</span>        <span class="s">'builtins'</span><span class="p">:</span> <span class="p">[</span><span class="s">'flavors.templatetags.flavors_tags'</span><span class="p">],</span>
    <span class="p">},</span>
<span class="p">]</span>
</code></pre></div></div>

<p>DRY를 해결하는 것처럼 보이지만 다음과 같은 점들로 인해 DRY의 장점이 무의미해집니다.</p>

<ul>
  <li>템플릿 태그 라이브러리를 <code class="language-plaintext highlighter-rouge">django.template.Template</code>에 의해 로드된 모든 템플릿에 로드함으로 오버헤드를 일으킴.
    <ul>
      <li>모든 상속된 템플릿, 템플릿 <code class="language-plaintext highlighter-rouge">{% include %}</code>, <code class="language-plaintext highlighter-rouge">inclusion_tag</code> 등에 영향을 미침.</li>
    </ul>
  </li>
  <li>템플릿 태그 라이브러리가 암시적으로 로드되기 때문에 디버깅이 까다로워짐</li>
</ul>

:ET