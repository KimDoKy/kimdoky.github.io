I"5<blockquote>
  <p><a href="https://www.feldroy.com/books/two-scoops-of-django-3-x">Two Scoops of Django 3.x</a></p>
</blockquote>

<hr />

<ul>
  <li>Django Project: 장고 웹 프레임워크 기반으로 한 웹 애플리케이션</li>
  <li>Django apps: 프로젝트의 한 기능을 표현하기 위해 디자인된 작은 라이브러리</li>
  <li>때로는 외부 장고 패키지를 지칭하기도 함</li>
  <li><code class="language-plaintext highlighter-rouge">INSTALLED_APPS</code>: 프로젝트에서 이용하려고 설정한 장고 앱들</li>
  <li>Third-party Django packages: pip를 통해 패키지화된, 재사용 가능한 플러그인 형태의 이용 가능한 장고 앱</li>
</ul>

<h2 id="41-the-golden-rule-of-django-app-design">4.1 The Golden Rule of Django App Design</h2>

<p>“좋은 장고 앱을 정의하고 개발하는 것은 유닉스 철학을 따르는 것입니다. ‘각 프로그램이 하나의 일을 잘 할 수 있게 만들 것’”</p>

<h3 id="411-a-practical-example-of-apps-in-a-project">4.1.1 A Practical Example of Apps in a Project</h3>

<ul>
  <li>flavors app: 상점의 모든 아이스크림 종류가 기록되고, 그 목록을 웹 사이트에 보여주는 앱</li>
  <li>blog app: 상점 공식 블로그</li>
  <li>events app: 상점의 행사 내용을 상점 웹 사이트에 보여주는 앱</li>
  <li>shop app: 온라인 주문을 통해 아이스크림을 판매하는 앱</li>
  <li>tickets app: 무제한 아이스크림 행사에 이용될 티켓 판매를 관리하는 앱</li>
</ul>

<h2 id="42-what-to-name-your-django-apps">4.2 What to Name Your Django Apps</h2>

<ul>
  <li>가능한 한 단어로 된 이름을 이용</li>
  <li>앱의 중심이 되는 모델 이름의 복수 형태</li>
  <li>blog와 같은 것들은 예외</li>
  <li>앱의 메인 모델 뿐만 아니라 URL의 주소 표현도 고려해야 함</li>
  <li>PEP-8 규약</li>
</ul>

<h2 id="43-when-in-doubt-keep-apps-small">4.3 When in Doubt, Keep Apps Small</h2>

<ul>
  <li>앱들은 최대한 작게 유지</li>
</ul>

<h2 id="44-what-modules-belong-in-an-app">4.4 What Modules Belong in an App?</h2>

<p>앱들 사이에서 공통으로 존재하는 모듈과 그렇지 않은 모듈이 있습니다.</p>

<h3 id="441-common-app-modules">4.4.1 Common App Modules</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Common modules
scoops/
├── __init__.py
├── admin.py
├── forms.py
├── management/
├── migrations/
├── models.py
├── templatetags/
├── tests/
├── urls.py
├── views.py
</code></pre></div></div>

<h3 id="442-uncommon-app-modules">4.4.2 Uncommon App Modules</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># uncommon modules
   scoops/
   ├── api/ # API를 생성할 때 필요한 다양한 모듈을 분리하기 위해 생성하는 패키지
   ├── behaviors.py # 모델 믹스인 위치에 대한 옵션
   ├── constants.py # 앱 레벨에서 이용되는 세팅을 저장
   ├── context_processors.py
   ├── decorators.py # 데코레이터
   ├── db/ # 여러 프로젝트에서 이용되는 커스텀 모델이나 컴포넌트
   ├── exceptions.py
   ├── fields.py # 폼 필드. 때론 db/ 에서 충분하지 못한 필드를 보조
   ├── factories.py # 테스트 데이터 팩터리 파일
   ├── helpers.py # 헬퍼 함수 / 뷰와 모델의 경량화를 위해 추출한 코드를 저장
   ├── managers.py # models.py가 너무 커질 경우 커스텀 모델 매니저를 저장
   ├── middleware.py
   ├── schema.py # GraphQL API를 위한 파일
   ├── signals.py # 커스텀 시그널
   ├── utils.py # helpers.py와 같은 기능
   ├── viewmixins.py # 뷰 믹스인을 이 모듈로 이전하여 뷰 모듈과 패키지 경량화함
</code></pre></div></div>

<h2 id="45-alternative-ruby-on-rails-style-approaches">4.5 Alternative: Ruby on Rails-Style Approaches</h2>

<p>Ruby on Rails 역시 성공적인 애플리케이션 프레임워크로써, 스타일을 검토할 가치가 있습니다.</p>

<h3 id="451-service-layers">4.5.1 Service Layers</h3>

<p>Django 메인테이너들의 블로그 참고</p>

<ul>
  <li><a href="https://www.b-list.org/weblog/2020/mar/16/no-service/">Against service layers in Django</a></li>
  <li><a href="https://www.b-list.org/weblog/2020/mar/23/still-no-service/">More on service layers in Django</a></li>
  <li><a href="https://www.dabapps.com/blog/django-models-and-encapsulation/">Django models, encapsulation and data integrity</a></li>
</ul>

<h3 id="452-the-large-single-app-project">4.5.2 The Large Single App Project</h3>

<ul>
  <li>이 설계는 마이그레이션이 더 쉽고, 테이블 이름이 단순화된 패턴을 따르는 장점이 있습니다.</li>
  <li>소규모 프로젝트는 이러한 설계를 사용하지만, 대규모 프로젝트에서는 따르지 않습니다.</li>
  <li>Rails는 이 설계를 수용하고 있지만, Django는 이 설계에 최적화되어 있지 않습니다. 이 설계를 사용하려면 경험과 전문 지식이 필요합니다.</li>
</ul>

<p>새로운 패러다임을 배우는 것은 좋지만, Django는 구성보다는 관례에 큰 기반을 하고 있습니다.</p>
:ET