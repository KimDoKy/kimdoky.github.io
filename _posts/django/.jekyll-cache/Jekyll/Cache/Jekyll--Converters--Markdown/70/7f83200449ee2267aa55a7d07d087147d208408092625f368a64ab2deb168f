I"6<blockquote>
  <p><a href="https://www.feldroy.com/books/two-scoops-of-django-3-x">Two Scoops of Django 3.x</a></p>
</blockquote>

<hr />

<h2 id="91-advantages-of-fbvs">9.1 Advantages of FBVs</h2>

<p>함수적인(functional) 특징이 장점입니다.</p>

<ul>
  <li>뷰 코드는 작을수록 좋다.</li>
  <li>뷰에서 절대 코드를 반복해서 사용하지 말자.</li>
  <li>뷰는 프레젠테이션 로직을 처리해야 한다. 비즈니스 로직은 가능한 한 모델 로직에 적용시키고 만약 해야 한다면 폼 안에 내재시켜야 한다.</li>
  <li>뷰를 가능한 한 단순하게 유지하자.</li>
  <li>403, 404, 500을 처리하는 커스텀 코드를 쓰는데 이용하라.</li>
  <li>복잡하게 중첩된 if 블록 구문을 피하자</li>
</ul>

<h2 id="92-passing-the-httprequest-object">9.2 Passing the HttpRequest Object</h2>

<p>middleware나 context processors 같은 글로벌 액션에 연동되지 않은 경우 재사용에 문제가 있습니다.<br />
프로젝트 전체를 아우르는 유틸리니 팜수를 만들어 사용하는 것을 추천합니다.</p>

<p><code class="language-plaintext highlighter-rouge">django.http.HttpRequest</code> 객체를 요청 함수의 primary argument로 넣음으로써 인자 구성이 단순하게 됩니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.core.exceptions</span> <span class="kn">import</span> <span class="n">PermissionDenied</span> 
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpRequest</span>

<span class="k">def</span> <span class="nf">check_sprinkle_rights</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">HttpRequest</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">HttpRequest</span><span class="p">:</span> 
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">user</span><span class="p">.</span><span class="n">can_sprinkle</span> <span class="ow">or</span> <span class="n">request</span><span class="p">.</span><span class="n">user</span><span class="p">.</span><span class="n">is_staff</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">request</span>

    <span class="c1"># Return a HTTP 403 back to the user
</span>    <span class="k">raise</span> <span class="n">PermissionDenied</span>
</code></pre></div></div>

<p>파이썬 언어는 동적 타입 언어이기 때문에 임의의 값이 아닌 HttpRequest 객체를 반환합니다.</p>

<p>실제 코드에 적용하면 아래와 같습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">get_object_or_404</span>
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpRequest</span><span class="p">,</span> <span class="n">HttpResponse</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Sprinkle</span>
<span class="kn">from</span> <span class="nn">.utils</span> <span class="kn">import</span> <span class="n">check_sprinkles</span>

<span class="k">def</span> <span class="nf">sprinkle_list</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">HttpRequest</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">HttpResponse</span><span class="p">:</span>
    <span class="s">"""Standard list view"""</span>
    <span class="n">request</span> <span class="o">=</span> <span class="n">check_sprinkles</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> 
        <span class="s">"sprinkles/sprinkle_list.html"</span><span class="p">,</span> 
        <span class="p">{</span><span class="s">"sprinkles"</span><span class="p">:</span> <span class="n">Sprinkle</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()})</span>

<span class="k">def</span> <span class="nf">sprinkle_detail</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">HttpRequest</span><span class="p">,</span> <span class="n">pk</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">HttpResponse</span><span class="p">:</span> 
    <span class="s">"""Standard detail view"""</span>
    <span class="n">request</span> <span class="o">=</span> <span class="n">check_sprinkles</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
    <span class="n">sprinkle</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Sprinkle</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span>
        <span class="s">"sprinkles/sprinkle_detail.html"</span><span class="p">,</span> 
        <span class="p">{</span><span class="s">"sprinkle"</span><span class="p">:</span> <span class="n">sprinkle</span><span class="p">})</span>

<span class="k">def</span> <span class="nf">sprinkle_preview</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">HttpRequest</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">HttpResponse</span><span class="p">:</span> 
    <span class="s">"""
    Preview of new sprinkle, but without the
    check_sprinkles function being used.
    """</span>
    <span class="n">sprinkle</span> <span class="o">=</span> <span class="n">Sprinkle</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span> 
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span>
        <span class="s">"sprinkles/sprinkle_preview.html"</span><span class="p">,</span>
        <span class="p">{</span><span class="s">"sprinkle"</span><span class="p">:</span> <span class="n">sprinkle</span><span class="p">})</span>
</code></pre></div></div>

<p>CBV으로 통합하기도 쉽습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.views.generic</span> <span class="kn">import</span> <span class="n">DetailView</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Sprinkle</span>
<span class="kn">from</span> <span class="nn">.utils</span> <span class="kn">import</span> <span class="n">check_sprinkles</span>

<span class="k">class</span> <span class="nc">SprinkleDetail</span><span class="p">(</span><span class="n">DetailView</span><span class="p">):</span>
    <span class="s">"""Standard detail view"""</span>
    <span class="n">model</span> <span class="o">=</span> <span class="n">Sprinkle</span>

    <span class="k">def</span> <span class="nf">dispatch</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">request</span> <span class="o">=</span> <span class="n">check_sprinkles</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">super</span><span class="p">().</span><span class="n">dispatch</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="93-decrators-are-sweet">9.3 Decrators Are Sweet</h2>

<p>함수의 단순 명료함이라는 장점과 데코레이터의 간편 표기법(syntactic sugar)을 섞으면, 언제든 사용 가능하고, 재사용이 가능한 매우 강력한 도구가 됩니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">functools</span>

<span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">view_func</span><span class="p">):</span>
    <span class="o">@</span><span class="n">functools</span><span class="p">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">view_func</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">new_view_func</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="c1"># You can modify the request (HttpRequest) object here.
</span>        <span class="n">response</span> <span class="o">=</span> <span class="n">view_func</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="c1"># You can modify the response (HttpResponse) object here. 
</span>        <span class="k">return</span> <span class="n">response</span>
    <span class="k">return</span> <span class="n">new_view_func</span>
</code></pre></div></div>

<p>아래처럼 활용할 수 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">get_object_or_404</span><span class="p">,</span> <span class="n">render</span>
<span class="kn">from</span> <span class="nn">.decorators</span> <span class="kn">import</span> <span class="n">check_sprinkles</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Sprinkle</span>

<span class="o">@</span><span class="n">check_sprinkles</span>
<span class="k">def</span> <span class="nf">sprinkle_detail</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">HttpRequest</span><span class="p">,</span> <span class="n">pk</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">HttpResponse</span><span class="p">:</span> 
    <span class="s">"""Standard detail view"""</span>
    <span class="n">sprinkle</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Sprinkle</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"sprinkles/sprinkle_detail.html"</span><span class="p">,</span>
        <span class="p">{</span><span class="s">"sprinkle"</span><span class="p">:</span> <span class="n">sprinkle</span><span class="p">})</span>
</code></pre></div></div>

<h3 id="931-be-conservative-with-decorators">9.3.1 Be Conservative With Decorators</h3>

<p>편하다고 남용하면 오히려 데코레이터 자체를 난해하게 되고, 복잡하게 얽힌 상속 과정을 지닌 뷰보다 복잡해질 수도 있습니다.<br />
데코레이터가 뷰에 이용될 것인지 정하고, 정해진 수만큼만 사용하세요.</p>

<p><a href="https://pyvideo.org/pycon-us-2011/pycon-2011--how-to-write-obfuscated-python.html">파이콘의 해당 주제</a></p>

<blockquote>
  <p>데코레이터는 여러 곳에 쉽게 추가 할 수 있는 것이 장점이기 때문에, 남용한다는 것은 많이 사용한다는 것이 아니라, 데코레이터의 상속의 깊이와 관련된 문제이다.</p>
</blockquote>

<h3 id="932-additional-resources-on-decorators">9.3.2 Additional Resources on Decorators</h3>

<ul>
  <li><a href="https://daniel.feldroy.com/posts/python-decorator-cheatsheet">데코레이터 치트 시트</a></li>
</ul>

<h2 id="94-passing-the-httpresponse-object">9.4 Passing the HttpResponse Object</h2>

<p>HttpRequest와 마찬가지로, HttpResponse 객체도 함수와 함수 사이에서 주고 받을 수 있습니다.<br />
이 기능은 데코레이터와 같은 곳에서 큰 효과를 볼 수 있습니다.</p>

<h2 id="95-additional-resources-for-function-based-views">9.5 Additional Resources for Function-Based Views</h2>

<p><a href="https://spookylukey.github.io/django-views-the-right-way/">spookylukey</a></p>

<p>여기에 언급돤 CBV의 단점을 동의하지 않지만, FBV에게는 참고할 만한 글입니다.</p>
:ET