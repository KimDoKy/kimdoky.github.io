I"*<h1 id="django-rest-framework---metadata">Django REST Framework - Metadata</h1>

<hr />

<p><em>“[The OPTIONS] method allows a client to determine the options and/or requirements associated with a resource, or the capabilities of a server, without implying a resource action or initiating a resource retrieval.”</em></p>

<p><em>“[OPTIONS] 메소드는 클라이언트가 자원 동작을 암시하거나 자원 검색을 시작하지 않고 자원 또는 서버의 기능과 관련된 옵션 및 <code class="language-plaintext highlighter-rouge">/</code> 또는 요구 사항을 결정할 수 있게 합니다.”</em></p>

<p><em>— RFC7231, Section 4.3.7.</em></p>

<hr />

<h2 id="metadata">Metadata</h2>
<p>REST 프레임워크는 API가 <code class="language-plaintext highlighter-rouge">OPTIONS</code> 요청에 어떻게 응답해야 하는지를 결정하기 위한 구성 가능한 메커니즘을 포함합니다. API 스키마 또는 기타 리소스 정보를 반환 할 수 있습니다.<br />
현재 HTTP OPTIONS 요청에 대해 어떤 스타일의 response를 반환해야하는지에 대해 널리 채택 된 규칙이 없으므로 유용한 정보를 반환하는 특별 스타일을 제공합니다.<br />
다음은 기본적으로 반환되는 정보를 보여주는 예제 response입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HTTP</span> <span class="mi">200</span> <span class="n">OK</span>
<span class="n">Allow</span><span class="p">:</span> <span class="n">GET</span><span class="p">,</span> <span class="n">POST</span><span class="p">,</span> <span class="n">HEAD</span><span class="p">,</span> <span class="n">OPTIONS</span>
<span class="n">Content</span><span class="o">-</span><span class="n">Type</span><span class="p">:</span> <span class="n">application</span><span class="o">/</span><span class="n">json</span>

<span class="p">{</span>
    <span class="s">"name"</span><span class="p">:</span> <span class="s">"To Do List"</span><span class="p">,</span>
    <span class="s">"description"</span><span class="p">:</span> <span class="s">"List existing 'To Do' items, or create a new item."</span><span class="p">,</span>
    <span class="s">"renders"</span><span class="p">:</span> <span class="p">[</span>
        <span class="s">"application/json"</span><span class="p">,</span>
        <span class="s">"text/html"</span>
    <span class="p">],</span>
    <span class="s">"parses"</span><span class="p">:</span> <span class="p">[</span>
        <span class="s">"application/json"</span><span class="p">,</span>
        <span class="s">"application/x-www-form-urlencoded"</span><span class="p">,</span>
        <span class="s">"multipart/form-data"</span>
    <span class="p">],</span>
    <span class="s">"actions"</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">"POST"</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">"note"</span><span class="p">:</span> <span class="p">{</span>
                <span class="s">"type"</span><span class="p">:</span> <span class="s">"string"</span><span class="p">,</span>
                <span class="s">"required"</span><span class="p">:</span> <span class="n">false</span><span class="p">,</span>
                <span class="s">"read_only"</span><span class="p">:</span> <span class="n">false</span><span class="p">,</span>
                <span class="s">"label"</span><span class="p">:</span> <span class="s">"title"</span><span class="p">,</span>
                <span class="s">"max_length"</span><span class="p">:</span> <span class="mi">100</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="setting-the-metadata-scheme">Setting the metadata scheme</h3>
<p><code class="language-plaintext highlighter-rouge">DEFAULT_METADATA_CLASS</code>설정 키를 사용하여 메타 데이터 클래스를 전역으로 설정할 수 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">REST_FRAMEWORK</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'DEFAULT_METADATA_CLASS'</span><span class="p">:</span> <span class="s">'rest_framework.metadata.SimpleMetadata'</span>
<span class="p">}</span>
</code></pre></div></div>
<p>또는 view에 대해 개별적으로 메타 데이터 클래스를 설정할 수 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">APIRoot</span><span class="p">(</span><span class="n">APIView</span><span class="p">):</span>
    <span class="n">metadata_class</span> <span class="o">=</span> <span class="n">APIRootMetadata</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">Response</span><span class="p">({</span>
            <span class="p">...</span>
        <span class="p">})</span>
</code></pre></div></div>
<p>REST 프레임워크 패키지는 <code class="language-plaintext highlighter-rouge">SimpleMetadata</code>라는 단일 메타 데이터 클래스 구현만 포함됩니다. 다른 스타일을 사용하려면 custom 메타 데이터 클래스를 구현해야합니다.</p>

<h3 id="creating-schema-endpoints">Creating schema endpoints</h3>
<p>일반 <code class="language-plaintext highlighter-rouge">GET</code> 요청으로 액서스되는 schema endpoint을 만들기 위한 특정 요구사항이 있는 경우 그렇게 하기 위해 메타 데이터 API를 다시 사용할 수 있습니다.<br />
예를 들어, 다음과 같은 추가 라우트를 vViewSet에 사용하여 linkable schema endpoint에 제공할 수  있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="n">list_route</span><span class="p">(</span><span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">schema</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
    <span class="n">meta</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">metadata_class</span><span class="p">()</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">meta</span><span class="p">.</span><span class="n">determine_metadata</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">OPTIONS</code> 응답을 <a href="https://www.mnot.net/blog/2012/10/29/NO_OPTIONS">캐싱할 수 없다는 것</a>을 포함하여 이 접근 방식을 선택할 수 있는 몇가지 이유가 있습니다.</p>

<hr />

<h2 id="custom-metadata-classes">Custom metadata classes</h2>
<p>custom metadata 클래스를 제공하려면 <code class="language-plaintext highlighter-rouge">BaseMetadata</code>를 대체하고 <code class="language-plaintext highlighter-rouge">decide_metadata(self, request, view)</code> 메서드를 구현해야합니다.<br />
유용한 정보로는 schema 정보 리턴, <a href="http://json-schema.org/">JSON schema</a>와 같은 형식 사용 또는 관리자에세 디버그 정보 리턴 등이 있습니다.</p>

<h3 id="example">Example</h3>
<p>다음 클래스는 <code class="language-plaintext highlighter-rouge">OPTIONS</code> 요청에 반환되는 정보를 제한하는데 사용될 수 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MinimalMetadata</span><span class="p">(</span><span class="n">BaseMetadata</span><span class="p">):</span>
    <span class="s">"""
    Don't include field and other information for `OPTIONS` requests.
    Just return the name and description.
    """</span>
    <span class="k">def</span> <span class="nf">determine_metadata</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">view</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="s">'name'</span><span class="p">:</span> <span class="n">view</span><span class="p">.</span><span class="n">get_view_name</span><span class="p">(),</span>
            <span class="s">'description'</span><span class="p">:</span> <span class="n">view</span><span class="p">.</span><span class="n">get_view_description</span><span class="p">()</span>
        <span class="p">}</span>
</code></pre></div></div>
<p>그런 다음 이 custom 클래스를 사용하도록 설정을 구성하세요.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">REST_FRAMEWORK</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'DEFAULT_METADATA_CLASS'</span><span class="p">:</span> <span class="s">'myproject.apps.core.MinimalMetadata'</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="third-party-packages">Third party packages</h2>
<p>다음의 타사 패키지는 추가 메나 데이터 구현을 제공합니다.</p>

<h3 id="drf-schema-adapter">DRF-schema-adapter</h3>
<p><a href="">drf-schema-adapter</a>는 프론트엔드 프레임워크 및 라이브러리에 스키마 정보를 보다 쉽게 제공할 수 있게 해주는 도구 set입니다.  metadata mixin 뿐만 아니라 다양한 라이브러리에 의해 읽을 수 있는 스키마 정보뿐만 아니라 <a href="http://json-schema.org/">json-schema</a>를 생성하는데 적합한 2개의 metadara 클래스와 여러 어댑터를 제공합니다.<br />
특정 프론트엔드에서 작동하도록 어댑터를 작성할 수도 있습니다. 그렇게 하고 싶다면 스키마 정보를 json 파일로 내보낼 수 있는 내보내기 기능을 제공합니다.</p>
:ET