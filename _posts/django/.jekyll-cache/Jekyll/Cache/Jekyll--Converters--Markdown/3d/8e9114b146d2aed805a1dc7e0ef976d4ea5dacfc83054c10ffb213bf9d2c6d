I"#<blockquote>
  <p><a href="https://www.feldroy.com/books/two-scoops-of-django-3-x">Two Scoops of Django 3.x</a></p>
</blockquote>

<hr />

<h2 id="11-the-importance-of-making-your-code-readable">1.1 The Importance of Making your Code Readable</h2>

<ul>
  <li>축약적이거나 함축적인 변수명은 피한다.</li>
  <li>함수 인자의 이름들은 꼭 써 준다.</li>
  <li>클래스와 메서드를 문서화한다.</li>
  <li>코드에 주석은 꼭 달도록 한다. (이 부분은 사람마다 다름. ex) 함수명만으로도 주석의 기능을 해야 한다는 의견도 있음)</li>
  <li>재사용 가능한 함수 또는 메서드 안에서 반복되는 코드들은 리팩터링을 해둔다.</li>
  <li>함수와 메서드는 가능한 한 작은 크기를 유지한다. 어림잡아 스크롤 없이 읽을 수 있는 길이가 적합하다.</li>
</ul>

<h2 id="12-pep-8">1.2 PEP 8</h2>

<p><a href="https://www.python.org/dev/peps/pep-0008/">PEP 8</a></p>

<ul>
  <li>새로운 프로젝트에 한해서만 적용한다. 기존 프로젝트가 다른 관례를 다른다면 기존 관례를 따라야 한다.</li>
  <li><a href="https://github.com/PyCQA/flake8">flake8</a>: 코딩 스타일, 논리적 에러를 점검하는 도구(로컬 or 지속적 통합 환경에 유용)</li>
</ul>

<h3 id="121-the-79-charactor-limit">1.2.1 The 79-Charactor Limit</h3>

<p>코드 한 라인은 79자를 넘기면 안된다.</p>

<ul>
  <li>오픈 소스 프로젝트는 79 컬럼 제약을 반드시 지켜야 한다.</li>
  <li>프라이빗 프로젝트에 한해서는 99 컬럼까지 제약을 확장함으로써 최신 모니터들의 장점을 좀 더 누릴 수 있다.</li>
  <li>79 컬럼을 맞추기 위해 변수나 함수, 클래스 이름을 줄여서는 안된다.</li>
</ul>

<h2 id="13-the-word-on-imports">1.3 The Word on Imports</h2>

<h4 id="pep8-imports">PEP8 imports</h4>

<ol>
  <li>표준 라이브러리</li>
  <li>연관 외부 라이브러리</li>
  <li>로컬 애플리케이션 또는 라이브러리에 한정된 임포트</li>
</ol>

<h4 id="django-imports">Django imports</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># stdlib imports
</span><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span>
<span class="kn">from</span> <span class="nn">os.path</span> <span class="kn">import</span> <span class="n">abspath</span>

<span class="c1"># Core Django imports
</span><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="kn">from</span> <span class="nn">django.utils.translation</span> <span class="kn">import</span> <span class="n">gettext_lazy</span> <span class="k">as</span> <span class="n">_</span>

<span class="c1"># Third-party app imports
</span><span class="kn">from</span> <span class="nn">django_extensions.db.models</span> <span class="kn">import</span> <span class="n">TimeStampedModel</span>

<span class="c1"># Imports from your apps
</span><span class="kn">from</span> <span class="nn">splits.models</span> <span class="kn">import</span> <span class="n">BananaSplit</span>
</code></pre></div></div>

<ol>
  <li>표준 라이브러리 임포트</li>
  <li>코어 장고 임포트</li>
  <li>장고와 무관한 외부 앱 임포트</li>
  <li>프로젝트 앱</li>
</ol>

<h2 id="14-understand-explicit-relative-imports">1.4 Understand Explicit Relative Imports</h2>

<p>코드의 재사용, 관리 등의 고려하여 상대 경로로 임포트를 해야 한다.</p>

<table>
  <thead>
    <tr>
      <th>Code</th>
      <th>Import Type</th>
      <th>Usage</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">from core.views import FoodMixin</code></td>
      <td>절대 임포트</td>
      <td>외부에서 임포트해서 현재 앱에서 이용할 때</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">from .models import Wafflecone</code></td>
      <td>명시적 상대</td>
      <td>다른 모듈에서 임포트해서 현재 앱에서 이용할 때</td>
    </tr>
  </tbody>
</table>

<h2 id="15-avoid-using-import-">1.5 Avoid Using Import *</h2>

<p><code class="language-plaintext highlighter-rouge">import *</code>는 금지</p>

<p>다른 파이썬 모듈의 이름 공간들이 현재 작업하는 모듈의 이름 공간에 추가로 로딩되거나 기존 것 위에 덮여서 로딩되는 일이 발생할 수 있다.</p>

<h3 id="151-other-python-naming-collisions">1.5.1 Other Python Naming Collisions</h3>

<p>임포트 하는 것 중 같은 이름이 있다면 <code class="language-plaintext highlighter-rouge">as</code>로 별칭 처리</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">CharField</span> <span class="k">as</span> <span class="n">ModelCharField</span>
<span class="kn">from</span> <span class="nn">django.froms</span> <span class="kn">import</span> <span class="n">CharField</span> <span class="k">as</span> <span class="n">FormCharField</span>
</code></pre></div></div>

<h2 id="16-django-coding-style">1.6 Django Coding Style</h2>

<h3 id="161-consider-the-django-coding-style-guidelines">1.6.1 Consider the Django Coding Style Guidelines</h3>

<p>Django는 내부적으로 PEP 8을 확장한 <a href="https://docs.djangoproject.com/en/3.2/internals/contributing/writing-code/coding-style/">스타일 가이드라인</a>이 있다.</p>

<h3 id="162-use-underscores-in-url-pattern-names-rather-than-dashes">1.6.2 Use Underscores in URL Pattern Names Rather Than Dashes</h3>

<p>URL 패턴 이름에는 underscore(<code class="language-plaintext highlighter-rouge">_</code>)를 사용한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">patterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="n">route</span><span class="o">=</span><span class="s">'add/'</span><span class="p">,</span>
        <span class="n">view</span><span class="o">=</span><span class="n">views</span><span class="p">.</span><span class="n">add_topping</span><span class="p">,</span>
        <span class="n">name</span><span class="o">=</span><span class="s">'toppings:add_topping'</span><span class="p">),</span>
    <span class="p">]</span>
</code></pre></div></div>

<h3 id="163-use-underscores-in-template-block-names-rather-than-dashes">1.6.3 Use Underscores in Template Block Names Rather Than Dashes</h3>

<p>템플릿 블록에도 underscore를 사용한다.</p>

<h2 id="17-choose-js-html-and-css-style-guides">1.7 Choose JS, HTML, and CSS Style Guides</h2>

<h3 id="171-javascript-style-guides">1.7.1 JavaScript Style Guides</h3>

<ul>
  <li>JS는 공석직인 가이드 라인은 없다. 자신이 선호하는 비공식 스타일을 이용하면 된다.</li>
  <li>특정 프레임워크를 사용한다면해당 스타일 가이드를 따라야 한다.</li>
  <li><a href="https://eslint.org/">ESLint</a>: JS 스타일 점검 도구</li>
</ul>

<h3 id="172-html-and-css-style-guides">1.7.2 HTML and CSS Style Guides</h3>

<ul>
  <li><a href="https://codeguide.co/">Code Guide</a>: HTML, CSS 코드 가이드</li>
  <li><a href="https://github.com/necolas/idiomatic-css">necolas; idiomatic-css</a>: CSS 작성 원칙</li>
  <li><a href="https://stylelint.io/">CSScomb</a>: CSS 코딩 스타일 포맷 도구</li>
</ul>

<h2 id="18-never-code-to-the-ide-or-text-editor">1.8 Never Code to the IDE (Or Text Editor)</h2>

<p>IDE에는 자동으로 기본 뼈대를 완성해주는 기능이 있다.
해당 기능에 너무 종속되며 안됩니다.</p>
:ET