I"Μ<blockquote>
  <p><a href="https://www.feldroy.com/books/two-scoops-of-django-3-x">Two Scoops of Django 3.x</a></p>
</blockquote>

<hr />

<p>REST(representational state transfer) API는 다양한 환경과 용도에 맞는 데이터를 제공하는 디자인</p>

<h3 id="django-rest-framework">django-rest-framework</h3>

<ul>
  <li>객체 지향 디자인에 크게 의존하며 쉽게 확장할 수 있도록 설계됨</li>
  <li>Django CBV에서 직접 제작하여, Django의 연장성처럼 느껴짐</li>
  <li>API 생성에 대한 다양한 뷰가 제공됨</li>
  <li>강력한 serializer 시스템</li>
  <li>Authentication, Authorization 이 강력하고 확장 가능한 방식으로 적용됨</li>
  <li>FBV으로도 사용 가능</li>
</ul>

<h2 id="171-fundamentals-of-basic-rest-api-design">17.1. Fundamentals of Basic REST API Design</h2>

<p>HTTP 메서드와 HTTP 상태코드는 알아두어야 합니다.</p>

<ul>
  <li>HTTP 메서드</li>
</ul>

<table>
  <thead>
    <tr>
      <th>요청 목적</th>
      <th>HTTP 메서드</th>
      <th>SQL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>새로운 리소스 생성</td>
      <td>POST</td>
      <td>INSERT</td>
    </tr>
    <tr>
      <td>리소스 읽기</td>
      <td>GET</td>
      <td>SELECT</td>
    </tr>
    <tr>
      <td>리소스의 메타데이터 요청</td>
      <td>HEAD</td>
      <td> </td>
    </tr>
    <tr>
      <td>리소스 데이터 업데이트</td>
      <td>PUT</td>
      <td>UPDATE</td>
    </tr>
    <tr>
      <td>리소스의 부분 변경</td>
      <td>PATCH</td>
      <td>UPDATE</td>
    </tr>
    <tr>
      <td>리소스 삭제</td>
      <td>DELETE</td>
      <td>DELETE</td>
    </tr>
    <tr>
      <td>특정 URL에 대해 지원되는 HTTP 메서드 출력</td>
      <td>OPTIONS</td>
      <td> </td>
    </tr>
    <tr>
      <td>요청에 대한 반환 에코</td>
      <td>TRACE</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<ul>
  <li>read-only API : GET</li>
  <li>read-write API: 최소한 POST. PUT과 DELETE도 고려해야 함</li>
  <li>GET, POST만 구현하여 단순화하기도 함</li>
  <li>GET, PUT, DELETE는 멱등 관계이고, POST, PATCH는 그렇지 않음</li>
  <li>PUT 요청을 지원한다면 PATCH을 구현하는 것이 좋음</li>
  <li>HTTP 상태코드</li>
</ul>

<table>
  <thead>
    <tr>
      <th>HTTP 상태 코드</th>
      <th>성공/실패</th>
      <th>의미</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>200 OK</td>
      <td>Success</td>
      <td>GET -  리소스 반환<br />POST - 상태 메시지 제공 또는 리소스 반환</td>
    </tr>
    <tr>
      <td>201 Created</td>
      <td>Success</td>
      <td>POST - 상태 메시지 반환 또는 생성된 리소스 반환</td>
    </tr>
    <tr>
      <td>204 No Content</td>
      <td>Success</td>
      <td>DELETE - 성공적으로 삭제된 요청의 응답</td>
    </tr>
    <tr>
      <td>304 Unchanged</td>
      <td>Redirect</td>
      <td>ALL - 이전 요청으로부터 아무런 변화가 없음. 성능 개선을 위해 마지막으로 수정된 리소스나 Etag 헤더를 확인하기 위함</td>
    </tr>
    <tr>
      <td>400 Bad Request</td>
      <td>Failure</td>
      <td>ALL - 폼 검증 에러를 포함한 에러 메시지 반환</td>
    </tr>
    <tr>
      <td>401 Unauthorized</td>
      <td>Failure</td>
      <td>ALL - 인증 요청을 했으나 사용자가 인증 요건을 제공하지 않음</td>
    </tr>
    <tr>
      <td>403 Forbidden</td>
      <td>Failure</td>
      <td>ALL - 사용자가 허용되지 않은 컨텐츠로 접근 시도</td>
    </tr>
    <tr>
      <td>404 Not Found</td>
      <td>Failure</td>
      <td>ALL - 리소스 없음</td>
    </tr>
    <tr>
      <td>405 Method Not Allowed</td>
      <td>Failure</td>
      <td>ALL - 허가되지 않은 HTTP 메서드로 시도됨</td>
    </tr>
    <tr>
      <td>410 Gone</td>
      <td>Failure</td>
      <td>ALL -  더는 제공되지 않는 메서드로 호출. 새 버전의 API를 제공하기 위해 기존 API 서비스를 중지할 때 이용. 모바일의 경우 애플리케이션 업그레이드 요청하는 방법으로 쓰기도 함</td>
    </tr>
    <tr>
      <td>429 Too Many Request</td>
      <td>Failure</td>
      <td>ALL - 제한 시간 내에 너무 많은 요청을 보냄. 접속 제한(rate limit)을 이용할 때 사용</td>
    </tr>
  </tbody>
</table>

<h2 id="172-illustrating-design-concepts-with-a-simple-api">17.2 Illustrating Design Concepts With a Simple API</h2>

<ul>
  <li>관리자만 허용하도록 기본 권한 클래스를 설정</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">REST_FRAMEWORK</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'DEFAULT_PERMISSION_CLASSES'</span><span class="p">:</span> <span class="p">(</span>
        <span class="s">'rest_framework.permissions.IsAdminUser'</span><span class="p">,</span>
    <span class="p">),</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>조회를 위한 UUID가 추가된 모델</li>
</ul>

<p>공개된 순차키는 사용하지 말자.
<a href="">Chap28.28 Never Display Sequential Primary Keys</a>에서 자세히 다룰 예정
여기서는 기본키 대신 UUID를 사용합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># flavors/models.py
</span><span class="kn">import</span> <span class="nn">uuid</span> <span class="k">as</span> <span class="n">uuid_lib</span>
<span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">reverse</span>

<span class="k">class</span> <span class="nc">Flavor</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
    <span class="n">slug</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">SlugField</span><span class="p">(</span><span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">uuid</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">UUIDField</span><span class="p">(</span>
        <span class="n">db_index</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">default</span><span class="o">=</span><span class="n">uuid_lib</span><span class="p">.</span><span class="n">uuid4</span><span class="p">,</span>
        <span class="n">editable</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">scoops_remaining</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_absolute_url</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">reverse</span><span class="p">(</span><span class="s">'flavors:detail'</span><span class="p">,</span> <span class="n">kwargs</span><span class="o">=</span><span class="p">{</span><span class="s">'slug'</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">slug</span><span class="p">})</span>
</code></pre></div></div>

<ul>
  <li>시리얼라이저 클래스를 정의합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># flavors/api/serializers.py
</span><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>
<span class="kn">from</span> <span class="nn">..models</span> <span class="kn">import</span> <span class="n">Flavor</span>

<span class="k">class</span> <span class="nc">FlavorSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span> <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
           <span class="n">model</span> <span class="o">=</span> <span class="n">Flavor</span>
           <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span><span class="s">'title'</span><span class="p">,</span> <span class="s">'slug'</span><span class="p">,</span> <span class="s">'uuid'</span><span class="p">,</span> <span class="s">'scoops_remaining'</span><span class="p">]</span>
</code></pre></div></div>

<ul>
  <li>API 뷰를 작성합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># flavors/api/views.py
</span><span class="kn">from</span> <span class="nn">rest_framework.generics</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">ListCreateAPIView</span><span class="p">,</span>
    <span class="n">RetrieveUpdateDestroyAPIView</span>
<span class="p">)</span>
<span class="kn">from</span> <span class="nn">rest_framework.permissions</span> <span class="kn">import</span> <span class="n">IsAuthenticated</span>
<span class="kn">from</span> <span class="nn">..models</span> <span class="kn">import</span> <span class="n">Flavor</span>
<span class="kn">from</span> <span class="nn">.serializers</span> <span class="kn">import</span> <span class="n">FlavorSerializer</span>

<span class="k">class</span> <span class="nc">FlavorListCreateAPIView</span><span class="p">(</span><span class="n">ListCreateAPIView</span><span class="p">):</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Flavor</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>
    <span class="n">permission_classes</span> <span class="o">=</span> <span class="p">(</span><span class="n">IsAuthenticated</span><span class="p">,</span> <span class="p">)</span>
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">FlavorSerializer</span>
    <span class="n">lookup_field</span> <span class="o">=</span> <span class="s">'uuid'</span>

<span class="k">class</span> <span class="nc">FlavorRetrieveUpdateDestroyAPIView</span><span class="p">(</span><span class="n">RetrieveUpdateDestroyAPIView</span><span class="p">):</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Flavor</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>
    <span class="n">permission_classes</span> <span class="o">=</span> <span class="p">(</span><span class="n">IsAuthenticated</span><span class="p">,</span> <span class="p">)</span>
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">FlavorSerializer</span>
    <span class="n">lookup_field</span> <span class="o">=</span> <span class="s">'uuid'</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">flavors/urls.py</code> 모듈에 연결합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># flavors/urls.py
</span><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">flavors.api</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span>
        <span class="n">route</span><span class="o">=</span><span class="s">'api/'</span><span class="p">,</span>
        <span class="n">view</span><span class="o">=</span><span class="n">views</span><span class="p">.</span><span class="n">FlavorListCreateAPIView</span><span class="p">.</span><span class="n">as_view</span><span class="p">(),</span>
        <span class="n">name</span><span class="o">=</span><span class="s">'flavor_rest_api'</span>
    <span class="p">),</span>
    <span class="n">path</span><span class="p">(</span>
        <span class="n">route</span><span class="o">=</span><span class="s">'api/&lt;uuid:uuid&gt;/'</span><span class="p">,</span>
        <span class="n">view</span><span class="o">=</span><span class="n">views</span><span class="p">.</span><span class="n">FlavorRetrieveUpdateDestroyAPIView</span><span class="p">.</span><span class="n">as_view</span><span class="p">(),</span>
        <span class="n">name</span><span class="o">=</span><span class="s">'flavor_rest_api'</span>
    <span class="p">)</span>
<span class="p">]</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>Url</th>
      <th>View</th>
      <th>Url Name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>/flavors/api/ FlavorListCreateAPIView</td>
      <td><code class="language-plaintext highlighter-rouge">flavor_rest_api</code></td>
      <td> </td>
    </tr>
    <tr>
      <td>/flavors/api/:uuid/</td>
      <td>FlavorRetrieveUpdateDestroyAPIView</td>
      <td><code class="language-plaintext highlighter-rouge">flavor_rest_api</code></td>
    </tr>
  </tbody>
</table>

<p>프론트엔드에서 <code class="language-plaintext highlighter-rouge">{% url %}</code> 템플릿 태그로 Flavor 리소스에 액세스 할 수 있습니다.</p>

<p>최종적으로 REST-style API 으로 정의하게 되었습니다.</p>

<h2 id="173-rest-api-architecture">17.3 REST API Architecture</h2>

<p>DRF를 사용하면 쉽고 빠르게 API를 구현 할 수 있습니다.</p>

<p>다음은 프로젝트에 따른 확장 및 유지하기 위한 팁들입니다.</p>

<h3 id="1731-use-consistent-api-module-naming">17.3.1 Use Consistent API Module Naming</h3>

<h3 id="1732-code-for-a-project-should-be-neatly-organized">17.3.2 Code for a Project Should Be Neatly Organized</h3>

<p>모든 API 코드를 각각 앱에 위치시키는 대신, API만 전담하는 앱(ex. apiv4)을 따로 구성하는 방법으로 프로젝트 코드들을 간결하게 정리 할 수 있습니다.</p>

<ul>
  <li>단점
    <ul>
      <li>해당 API 앱이 너무 커질 수 있음</li>
      <li>개별 앱으로부터 단절될 수 있음</li>
    </ul>
  </li>
</ul>

<h3 id="1733-code-for-an-app-should-remain-in-the-app">17.3.3 Code for an App Should Remain in the App</h3>

<ul>
  <li>소규모 프로젝트는 views.py 나 viewsets.py 모듈에 모아두는 일반적인 뷰 가이드라인을 따르면 됩니다.</li>
  <li>대규모 프로젝트의 경우 패키지로 나눌 수 있습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flavors/
 ├── api/
 │   ├── __init__.py
 │   ├── ... other modules here
 │   ├── views
 │   │    ├── __init__.py
 │   │    ├── flavor.py
 │   │    ├── ingredient.py
</code></pre></div></div>

<p>상호 연관된 앱이 너무 많으면 추적 및 관리하기가 어려워지는 단점이 있습니다. 이러한 경우 새로운 앱을 구성하는 방법을 택할 수 있습니다.</p>

<h3 id="1734-try-to-keep-business-logic-out-of-api-views">17.3.4 Try to Keep Business Logic Out of API Views</h3>

<p>가능한 한 로직을 API 뷰에서 분리하자. API 뷰도 뷰의 한 종류입니다.</p>

<h3 id="1735-grouping-api-urls">17.3.5 Grouping API URLs</h3>

<ul>
  <li>REST 뷰들은 views.py나 viewsets.py 모듈에 위치</li>
  <li>URLConf를 이용하여 urls.py에 모으기</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># core/api_urls.py
</span><span class="s">"""
    path('api/', include('core.api_urls', namespace='api')),
"""</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">flavors.api</span> <span class="kn">import</span> <span class="n">views</span> <span class="k">as</span> <span class="n">flavor_views</span>
<span class="kn">from</span> <span class="nn">users.api</span> <span class="kn">import</span> <span class="n">views</span> <span class="k">as</span> <span class="n">user_views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1"># {% url 'api:flavors' %}
</span>    <span class="n">path</span><span class="p">(</span>
        <span class="n">route</span><span class="o">=</span><span class="s">'flavors/'</span><span class="p">,</span>
        <span class="n">view</span><span class="o">=</span><span class="n">flavor_views</span><span class="p">.</span><span class="n">FlavorCreateReadView</span><span class="p">.</span><span class="n">as_view</span><span class="p">(),</span>
        <span class="n">name</span><span class="o">=</span><span class="s">'flavors'</span>
    <span class="p">),</span>
    <span class="c1"># {% url 'api:flavors' flavor.uuid %}
</span>    <span class="n">path</span><span class="p">(</span>
        <span class="n">route</span><span class="o">=</span><span class="s">'flavors/&lt;uuid:uuid&gt;/'</span><span class="p">,</span>
        <span class="n">view</span><span class="o">=</span><span class="n">flavor_views</span><span class="p">.</span><span class="n">FlavorReadUpdateDeleteView</span><span class="p">.</span><span class="n">as_view</span><span class="p">(),</span>
        <span class="n">name</span><span class="o">=</span><span class="s">'flavors'</span>
    <span class="p">),</span>
    <span class="c1"># {% url 'api:users' %}
</span>    <span class="n">path</span><span class="p">(</span>
        <span class="n">route</span><span class="o">=</span><span class="s">'users/'</span><span class="p">,</span>
        <span class="n">view</span><span class="o">=</span><span class="n">user_views</span><span class="p">.</span><span class="n">UserCreateReadView</span><span class="p">.</span><span class="n">as_view</span><span class="p">(),</span>
        <span class="n">name</span><span class="o">=</span><span class="s">'users'</span>
    <span class="p">),</span>
    <span class="c1"># {% url 'api:users' user.uuid %}
</span>    <span class="n">path</span><span class="p">(</span>
        <span class="n">route</span><span class="o">=</span><span class="s">'users/&lt;uuid:uuid&gt;/'</span><span class="p">,</span>
        <span class="n">view</span><span class="o">=</span><span class="n">user_views</span><span class="p">.</span><span class="n">UserReadUpdateDeleteView</span><span class="p">.</span><span class="n">as_view</span><span class="p">(),</span>
        <span class="n">name</span><span class="o">=</span><span class="s">'users'</span>
    <span class="p">),</span>
<span class="p">]</span>
</code></pre></div></div>

<h3 id="1736-test-your-api">17.3.6 Test Your API</h3>

<p>Django의 테스트 도구가 curl 보다 API 구현을 테스트하기에 편리합니다.</p>

<blockquote>
  <p><a href="">Chap24. Testing Stinks ans Is a Waste of Money</a>에서 자세히 다룰 예정
<a href="">Chap24.3.1: Each Test Method Tests One Thing</a></p>
</blockquote>

<h3 id="1737-version-your-api">17.3.7 Version Your API</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/api/v1/flavors</code> 처럼 API의 URL에 버전 정보를 포함시키자.
    <ul>
      <li>API 버전의 변경 적용이 용이함</li>
      <li>버전 변경에 따른 기존 이용자들의 혼란스러움을 해결
        <ul>
          <li>버전이 변경되어도 기존의 API는 유예기간을 주어야 함</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="1738-be-careful-with-customized-authentication-schemes">17.3.8 Be Careful With Customized Authentication Schemes</h3>

<p>사용자 인증 체계는 항상 주의해야 합니다.</p>

<ul>
  <li>새로운 인증 쳬게를 만든다면, 간단하고 잘 테스트된 상태를 유지합니다.</li>
  <li>쿠키 기반의 쳬게를 사용한다면 CSRF를 활성화해야 합니다.</li>
  <li>코드 외부에 기존 표준 인증 쳬계가 부족한 이유를 문서화합니다.</li>
  <li>코드 외부에 인증 쳬계가 작동하도록 설계된 방식을 심층적으로 문서화합니다.
    <ul>
      <li>커스텀한 인증을 위한 문서화는 중요합니다.
        <ul>
          <li>새로운 것을 생각해낸 추론을 검증하는데 도움이 됩니다. 문제를 문서화하지 못한다면 완전히 이해하지 못한 것입니다.</li>
          <li>문서화를 통해 구현하기 전에 솔루션을 설계하도록 강요합니다.</li>
          <li>추후에 커스텀한 이유를 기억/이해 할 수 있습니다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="174-when-drf-gets-in-the-way">17.4 When DRF Gets in the Way</h2>

<h3 id="1741-remote-procedure-calls-vs-rest-apis">17.4.1 Remote Procedure Calls vs REST APIs</h3>

<p>REST 프레임워크를 이용한 데이터 공개는 매우 강력합니다.</p>

<p>하지만 리소스가 애플리케이션 디자인의 현실적인 측면을 항상 일치 할 수는 없습니다.</p>

<p>API 사용자들에게 해당 사항을 각각 변경하게 하여 해결할 수 있지만 DB 무결성에 문제가 발생할 수 있습니다.</p>

<p>이런 특정 상황에 RPC(Remote Procedure Call. 특정 액션에 대한 메서드를 클라이언트 측에 RESTFul API로 제공하는 방법)를 사용할 수 있습니다</p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Remote_Procedure_Call">wikipedia / Remote Procedure Call</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Resource-oriented_architecture">wikipedia / Resource oriented architecture</a></li>
</ul>

<p>DRF는 APIView를 통해 RPC 호출을 구현 할 수 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># sundaes/api/views.py
</span><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">get_object_or_404</span>
<span class="kn">from</span> <span class="nn">rest_framework.response</span> <span class="kn">import</span> <span class="n">Response</span>
<span class="kn">from</span> <span class="nn">rest_framework.views</span> <span class="kn">import</span> <span class="n">APIView</span>
<span class="kn">from</span> <span class="nn">..models</span> <span class="kn">import</span> <span class="n">Sundae</span><span class="p">,</span> <span class="n">Syrup</span>
<span class="kn">from</span> <span class="nn">.serializers</span> <span class="kn">import</span> <span class="n">SundaeSerializer</span><span class="p">,</span> <span class="n">SyrupSerializer</span>

<span class="k">class</span> <span class="nc">PourSyrupOnSundaeView</span><span class="p">(</span><span class="n">APIView</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">sundae</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Sundae</span><span class="p">,</span> <span class="n">uuid</span><span class="o">=</span><span class="n">request</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="s">'uuid'</span><span class="p">])</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">sundae</span><span class="p">.</span><span class="n">add_syrup</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="s">'syrup'</span><span class="p">])</span>
        <span class="k">except</span> <span class="n">Sundae</span><span class="p">.</span><span class="n">TooManySyrups</span><span class="p">:</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="s">"Sundae already maxed out for syrups"</span>
            <span class="k">return</span> <span class="n">Response</span><span class="p">({</span><span class="s">'message'</span><span class="p">:</span> <span class="n">msg</span><span class="p">},</span> <span class="n">status_code</span><span class="o">=</span><span class="mi">400</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">Syrup</span><span class="p">.</span><span class="n">DoesNotExist</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="s">"{} does not exist"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="s">'syrup'</span><span class="p">])</span>
            <span class="k">return</span> <span class="n">Response</span><span class="p">({</span><span class="s">'message'</span><span class="p">:</span> <span class="n">msg</span><span class="p">},</span> <span class="n">status_code</span><span class="o">=</span><span class="mi">404</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">SundaeSerializer</span><span class="p">(</span><span class="n">sundae</span><span class="p">).</span><span class="n">data</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="n">sundae</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Sundae</span><span class="p">,</span> <span class="n">uuid</span><span class="o">=</span><span class="n">request</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="s">'uuid'</span><span class="p">])</span>
        <span class="n">syrups</span> <span class="o">=</span> <span class="p">[</span><span class="n">SyrupSerializer</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="n">data</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sundae</span><span class="p">.</span><span class="n">syrup_set</span><span class="p">.</span><span class="nb">all</span><span class="p">()]</span>
        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">syrups</span><span class="p">)</span>
</code></pre></div></div>

<p>지금까지의 API 디자인입니다.</p>

<ul>
  <li>/sundae/  # GET, POST</li>
  <li>/sundae/:uuid/  # PUT, DELETE</li>
  <li>/sundae/:uuid/syrup/  # GET, POST</li>
  <li>/syrup/  # GET, POST</li>
  <li>/syrup/:uuid/  # PUT, DELETE</li>
</ul>

<blockquote>
  <p><img src="https://preppykitchen.com/wp-content/uploads/2021/04/Hot-Fudge-Sundae-Feature.jpg" alt="" />
Sundae: 선디는 한 컵 정도의 아이스크김 위에 시럽 등을 뿌려먹는 빙과의 한 종류</p>
</blockquote>

<h3 id="1742-problems-with-complex-data">17.4.2 Problems With Complex Data</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/api/cones/  # GET, POST
/api/cones/:uuid/  # PUT, DELETE
/api/scoops/  # GET, POST
/api/scoops/:uuid/  # PUT, DELETE
</code></pre></div></div>

<blockquote>
  <p>models.py 파일이나 코드가 추가 되어있었다면 이해하기 편했을 듯..</p>
</blockquote>

<p>위와 같은 디자인은 복잡한 데이터의 문제가 있습니다.</p>

<ul>
  <li>Cone 모델에 Scoop 모델이 포함되어 있다</li>
  <li>Scoops 목록을 포함하는 Cone의 GET을 쉽게 작성할 수 있음</li>
  <li>하지만 추가/업데이트하는 Cone의 POST/PUT을 작성해야 함
    <ul>
      <li>하지만 유효성 검사나 사후 처리가 필요하다면 복잡도가 올라감</li>
    </ul>
  </li>
</ul>

<p>중첩 데이터에 대한 복잡한 솔루션들이 있지만, 여기서는 단순화하는 방법을 사용합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/api/cones/  # GET, POST
/api/cones/:uuid/  # PUT, DELETE
/api/cones/:uuid/scoops/  # GET, POST
/api/cones/:uuid/scoops/:uuid/  # PUT, DELETE
/api/scoops/  # GET, POST
/api/scoops/:uuid/  # PUT, DELETE
</code></pre></div></div>

<ul>
  <li>Scoops를 포함하는 Cone의 GET은 유지</li>
  <li>Cone 모델에 대한 POST/PUT을 제거하여 Cone에 대한 Scoops를 수정</li>
  <li>Cone에 속하는 Scoops에 대한 GET/POST/PUT API를 추가</li>
</ul>

<p>이러한 접근 방식은 view와 api 호출을 추가하지만 이러한 종류의 데이터 모델링은 API를 단순화할 수 있습니다.</p>

<p>API가 단순화되면 테스트가 더 쉬워집니다.</p>

<h3 id="1743-simplify-go-atomic">17.4.3 Simplify! Go Atomic!</h3>

<p>RPC, 복잡한 데이터 문제를 위해 단순화 패턴을 설정하여 해결할 수 있습니다.</p>

<p>하지만 DRF 문제가 발생한다면 다음의 질문들을 할 수 있습니다.</p>

<ul>
  <li>view를 단순화 할 수 있습니까? APIView로 전환하여 해결할 수 있습니까?</li>
  <li>view에 설명된 대로 REST 데이터 모델을 단순화할 수 있습니까? 직접적인 뷰들을 추가하면 해결할 수 있습니까?</li>
  <li>시리얼라이저가 엄청 복잡하다면 동일한 모델에 대해 두 개의 시리얼라이저로 나누어 해결할 수 있습니까?</li>
</ul>

<p>DRF 문제를 해결하기 위해 원자적인 구성요소로 설계/구현해야 합니다.</p>

<h4 id="원자-스타일의-장점">원자 스타일의 장점</h4>

<ul>
  <li>각 요소가 덜 수행되기 때문에 문서화가 더 쉽고 빠름</li>
  <li>코드 분기가 적어서 테스트하기 쉬움</li>
  <li>병목지점이 더욱 결리되어 병목현상을 쉽게 해결</li>
  <li>뷰 로직들이 나누어져 있어서 액세스별로 쉽게 수정이 가능하여 보안이 좋아짐</li>
</ul>

<h2 id="175-shutting-down-an-external-api">17.5 Shutting Down an External API</h2>

<p>새로운 버전에 따른 이전 버전의 API 중단하기 위한 단계</p>

<h3 id="1751-step1-notify-users-of-pending-shut-down">17.5.1 Step1: Notify Users of Pending Shut Down</h3>

<ul>
  <li>사용자들에게 서비스 중지를 미리 공지</li>
  <li>6개월이 적당하여, 최소 한 달 전에는 해야 함</li>
  <li>이메일, 블로그, SNS 등으로 공지</li>
</ul>

<h3 id="1752-step2-replace-api-with-410-error-view">17.5.2 Step2: Replace API With 410 Error View</h3>

<ul>
  <li>API가 중지되면 간단히 410 에러 뷰로 교체하자
    <ul>
      <li>새로운 API endpoint의 링크</li>
      <li>새로운 API 문서의 링크</li>
      <li>서비스 중지에 대한 세부 사항을 알려주는 문서의 링크</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># core/apiv1_shutdown.py
</span><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponseGone</span>
<span class="n">apiv1_gone_msg</span> <span class="o">=</span> <span class="s">"""APIv1 was removed on April 2, 2017. Please 􏰁→ switchtoAPIv2:
&lt;ul&gt;
  &lt;li&gt;
    &lt;a href="https://www.example.com/api/v3/"&gt;APIv3 Endpoint&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="https://example.com/apiv3_docs/"&gt;APIv3 Documentation&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="http://example.com/apiv1_shutdown/"&gt;APIv1 shutdown notice&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
"""</span>

<span class="k">def</span> <span class="nf">apiv1_gone</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">HttpResponseGone</span><span class="p">(</span><span class="n">apiv1_gone_msg</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="176-rate-limiting-your-api">17.6 Rate-Limiting Your API</h2>

<p>접속제한: 한 사용자가 주어진 시간에 얼마 이상의 요청을 보낼 때 이를 제어하는 것</p>

<h3 id="1761-unfettered-api-access-is-dangerous">17.6.1 Unfettered API Access Is Dangerous</h3>

<p><a href="https://djangopackages.org/">djangopackages.org</a> 초기에 api 접속에 제한이 없을 때 당시의 깃헙과의 경험담</p>

<h3 id="1762-rest-frameworks-must-come-with-rate-limiting">17.6.2 REST Frameworks Must Come With Rate Limiting</h3>

<ul>
  <li>REST 프레임워크는 반드시 접속 제한을 해야 합니다.</li>
  <li>HTTP 서버 접속 제한은 nginx나 apach를 사용할 수 있습니다.
    <ul>
      <li>장점: 매우 빠른 성능</li>
      <li>단점: 파이썬 코드로부터 얻을 수 있는 기능적인 부분을 잃게 됨</li>
      <li><a href="http://nginx.com/blog/rate-limiting-nginx/">nginx.com/blog/rate-limiting-nginx/</a></li>
      <li><a href="http://httpd.apache.org/docs/2.4/mod/mod_ratelimit.html">httpd.apache.org/docs/2.4/mod/mod-ratelimit.html</a></li>
      <li><a href="http://django-rest-framework.org/api-guide/throttling/#setting-the-throttling-policy">django-rest-framework.org/api-guide/throttling/</a></li>
    </ul>
  </li>
</ul>

<h3 id="1763-rate-limiting-can-be-a-business-plan">17.6.3 Rate Limiting Can Be a Business Plan</h3>

<p>접근 수준에 따른 가격 정책을 세우는 방법으로  비즈니스적으로 접속을 제한 할 수 있습니다.</p>

<h2 id="177-advertising-your-rest-api">17.7 Advertising Your REST API</h2>

<p>REST API 제작을 끝내고 해야 할 일들</p>

<h3 id="1771-documentation">17.7.1 Documentation</h3>

<p>API 문서를 만들어야 합니다.</p>

<ul>
  <li>반드시 쉽게 이용 가능한 코드 예제가 제공되어야 함</li>
  <li><a href="http://readthedocs.com">readthedocs.com</a> 이나 swagger.io를 추천</li>
  <li><a href="">Chap25. Documentation: Be Obsessed</a>에서 자세히 다룰 예정</li>
</ul>

<h3 id="1772-provide-client-sdks">17.7.2 Provide Client SDKs</h3>

<p>여러 언어를 지원하는 SDK(software development kit)을 제공할 수도 있습니다.</p>

<p>고객들에게 API를 알리는 것을 넘어서 새로운 API를 경험하게 해 줄 수 있습니다.</p>

<p><a href="">Chap23.9: Releasing Your Own Django Packages</a>에서 다시 다룰 예정</p>

<h2 id="178-additional-reading">17.8 Additional Reading</h2>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/REST">en.wikipedia.org/wiki/REST</a></li>
  <li><a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">en.wikipedia.org/wiki/List_of_HTTP_status_codes</a></li>
  <li><a href="http://github.com/OAI/OpenAPI-Specification">github.com/OAI/OpenAPI-Specification</a></li>
  <li><a href="http://jacobian.org/writing/rest-worst-practices/">jacobian.org/writing/rest-worst-practices/</a></li>
</ul>

<h2 id="179-other-approaches-for-crafting-apis">17.9 Other Approaches for Crafting APIs</h2>

<p>DRF를 사용하지 않는 다른 방법들입니다.</p>

<h3 id="1791-cbv-approach-jsonresponse-with-view">17.9.1 CBV Approach: JsonResponse with View</h3>

<p><code class="language-plaintext highlighter-rouge">django.views.generic.View</code> 에서<code class="language-plaintext highlighter-rouge">django.http.JsonResponse</code> 클래스를 사용할 수 있습니다. 모든 HTTP 메서드를 지원하지만 OpenAPI는 지원하지 않습니다.</p>

<p>이는 비동기 View에서도 작동합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">FlavorApiView</span><span class="p">(</span><span class="n">LoginRequiredMixin</span><span class="p">,</span><span class="n">View</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">({})</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">({})</span>

    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">({})</span>

    <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">({})</span>
</code></pre></div></div>

<h3 id="1792-fbv-approach-django-jsonview">17.9.2 FBV approach: django-jsonview</h3>

<p><code class="language-plaintext highlighter-rouge">django-jsonview</code>를 사용하는 방법이 있습니다.</p>

<p>단점은 HTTP의 모든 메서드와 복잡한 API 디자인을 한다면 FBV가 API 빌드나 OpenAPI 지원에 장애가 있습니다.</p>

<h3 id="1793-django-tastypie">17.9.3 django-tastypie</h3>

<p>django-tastypie는 CBV 시스템을 구현하는 성숙한 API 프레임워크입니다. DRF보다 3년앞서 개발되었습니다.
자체적으로 구현된 CBV 시스템을 제공하는 도구입니다.</p>

<ul>
  <li><a href="https://django-tastypie.readthedocs.io/en/latest/">django-tastypie</a></li>
</ul>

<h2 id="1710-summary">17.10 Summary</h2>

<ul>
  <li>DRF를 사용해야 하는 이유</li>
  <li>REST API와 DRF의 관련</li>
  <li>보안 고려 사항</li>
  <li>그룹화 전략</li>
  <li>단순화 전략</li>
  <li>기본 REST API 설계의 기초</li>
  <li>DRF 외의 대안</li>
</ul>

:ET