I"NU<h1 id="django-rest-framework---exceptions">Django REST Framework - Exceptions</h1>

<hr />

<p><em>“Exceptions… allow error handling to be organized cleanly in a central or high-level place within the program structure.”</em></p>

<p><em>“예외… 프로그램 구조 내의 중앙 또는 상위 위치에서 오류 처리를 명확하게 구성 할 수 있습니다.”</em></p>

<h2 id="-doug-hellmann-python-exception-handling-techniques"><em>— Doug Hellmann, Python Exception Handling Techniques</em></h2>

<h2 id="exceptions">Exceptions</h2>

<h3 id="exception-handling-in-rest-framework-views">Exception handling in REST framework views</h3>
<p>REST 프레임워크의 뷰는 다양한 예외를 처리하고 적절한 오류 응답을 반환합니다.</p>

<p>처리되는 예외는 다음과 같습니다.</p>

<ul>
  <li>REST 프레임워크 내에서 발생하는 <code class="language-plaintext highlighter-rouge">APIException</code>의 서브클래스입니다.</li>
  <li>Django의 <code class="language-plaintext highlighter-rouge">Http404</code> exception.</li>
  <li>Django의 <code class="language-plaintext highlighter-rouge">PermissionDenied</code> exception.</li>
</ul>

<p>각각의 경우에 REST 프레임워크는 적절한 상태 코드 및 내용 유형이 포함된 응답을 반환합니다. response 본문에는 오류의 성격에 관한 추가 세부 정보가 포함됩니다.<br />
대부분의 오류 응답에는 response 본문의 <code class="language-plaintext highlighter-rouge">detail</code>정보가 포함됩니다.</p>

<p>예를 들어, 다음 요청은:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DELETE http://api.example.com/foo/bar HTTP/1.1
Accept: application/json
</code></pre></div></div>
<p>해당 리소스에서 <code class="language-plaintext highlighter-rouge">DELETE</code> 메서드가 허용되지 않는다는 오류 응답을 받을 수 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">405</span> <span class="n">Method</span> <span class="n">Not</span> <span class="n">Allowed</span>
<span class="n">Content</span><span class="o">-</span><span class="n">Type</span><span class="p">:</span> <span class="n">application</span><span class="o">/</span><span class="n">json</span>
<span class="n">Content</span><span class="o">-</span><span class="n">Length</span><span class="p">:</span> <span class="mi">42</span>

<span class="p">{</span><span class="s">"detail"</span><span class="p">:</span> <span class="s">"Method 'DELETE' not allowed."</span><span class="p">}</span>
</code></pre></div></div>
<p>유효성 검사 오류는 약간 다르게 처리되며 필드 이름을 응답의 키로 포함합니다. 유효성 검사 오류가 특정 필드에만 해당되지 않으면 <code class="language-plaintext highlighter-rouge">"non_field_errors"</code>키를 사용하거나 <code class="language-plaintext highlighter-rouge">NON_FIELD_ERRORS_KEY</code> 설정에 대해 설정된 문자열 값을 사용합니다.<br />
모든 유효성 검증 오류는 다음과 같습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">400</span> <span class="n">Bad</span> <span class="n">Request</span>
<span class="n">Content</span><span class="o">-</span><span class="n">Type</span><span class="p">:</span> <span class="n">application</span><span class="o">/</span><span class="n">json</span>
<span class="n">Content</span><span class="o">-</span><span class="n">Length</span><span class="p">:</span> <span class="mi">94</span>

<span class="p">{</span><span class="s">"amount"</span><span class="p">:</span> <span class="p">[</span><span class="s">"A valid integer is required."</span><span class="p">],</span> <span class="s">"description"</span><span class="p">:</span> <span class="p">[</span><span class="s">"This field may not be blank."</span><span class="p">]}</span>
</code></pre></div></div>

<h3 id="custom-exception-handling">Custom exception handling</h3>
<p>API view에서 발생한 예외를 response 객체로 변환하는 handler 함수를 만들어 custom exception를 구현할 수 있습니다. 이를 통해 API에서 사용되는 오류 응답 스타일을 제어할 수 있습니다.</p>

<p>함수는 한쌍의 인수를 취해야하며, 첫번째는 처리할 예외이고, 두번째는 현재 처리중인 뷰와 같은 추가 context를 포함하는 dict입니다. exception handler 함수는 <code class="language-plaintext highlighter-rouge">Response</code> 객체를 반환하거나 예외를 처리 할 수 없는 경우 <code class="language-plaintext highlighter-rouge">None</code>을 반환해야합니다. handler가 <code class="language-plaintext highlighter-rouge">None</code>을 반환하면 예외가 다시 발생하고 Django는 표준 HTTP 500 ‘server error’응답을 반환합니다.</p>

<p>예를 들어, 모든 오류 응답에 다음과 같이 HTTP 본문 코드에 HTTP 상태 코드가 포함되도록 할 수 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">405</span> <span class="n">Method</span> <span class="n">Not</span> <span class="n">Allowed</span>
<span class="n">Content</span><span class="o">-</span><span class="n">Type</span><span class="p">:</span> <span class="n">application</span><span class="o">/</span><span class="n">json</span>
<span class="n">Content</span><span class="o">-</span><span class="n">Length</span><span class="p">:</span> <span class="mi">62</span>

<span class="p">{</span><span class="s">"status_code"</span><span class="p">:</span> <span class="mi">405</span><span class="p">,</span> <span class="s">"detail"</span><span class="p">:</span> <span class="s">"Method 'DELETE' not allowed."</span><span class="p">}</span>
</code></pre></div></div>
<p>response 스타일을 변경하기 위해 다음과 같은 custom exception handler를 작성 할 수 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">rest_framework.views</span> <span class="kn">import</span> <span class="n">exception_handler</span>

<span class="k">def</span> <span class="nf">custom_exception_handler</span><span class="p">(</span><span class="n">exc</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
    <span class="c1"># Call REST framework's default exception handler first,
</span>    <span class="c1"># to get the standard error response.
</span>    <span class="n">response</span> <span class="o">=</span> <span class="n">exception_handler</span><span class="p">(</span><span class="n">exc</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>

    <span class="c1"># Now add the HTTP status code to the response.
</span>    <span class="k">if</span> <span class="n">response</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">response</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="s">'status_code'</span><span class="p">]</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span>

    <span class="k">return</span> <span class="n">response</span>
</code></pre></div></div>
<p>context 인수는 기본 handler에서 사용되지 않지만 exception handler가 <code class="language-plaintext highlighter-rouge">context['view']</code>로 액서스 할 수 있는 현재 처리중인 뷰와 같은 추가 정보를 필요로 할 때 유용할 수 있습니다.<br />
<code class="language-plaintext highlighter-rouge">EXCEPTION_HANDLER</code>설정 키를 사용하여 설정에서 exception handler를 구성해야합니다. 예:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">REST_FRAMEWORK</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'EXCEPTION_HANDLER'</span><span class="p">:</span> <span class="s">'my_project.my_app.utils.custom_exception_handler'</span>
<span class="p">}</span>
</code></pre></div></div>
<p>지정하지 않으면 <code class="language-plaintext highlighter-rouge">EXCEPTION_HANDLER</code> 설정의 기본값은 REST 프레임워크에서 제공하는 표준 exception handler로 설정됩니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">REST_FRAMEWORK</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'EXCEPTION_HANDLER'</span><span class="p">:</span> <span class="s">'rest_framework.views.exception_handler'</span>
<span class="p">}</span>
</code></pre></div></div>
<p>exception handler는 발생하는 예외에 의해 생성 된 응답에 대해서만 호출됩니다. serializer 유효성 검사가 실패 할 때 generic view에서 반환되는 <code class="language-plaintext highlighter-rouge">HTTP_400_BAD_REQUEST</code>응답과 같이 뷰에서 직접 반환 된 응답에는 사용되지 않습니다.</p>

<hr />

<h2 id="api-reference">API Reference</h2>

<h3 id="apiexception">APIException</h3>
<p><strong>Signature</strong>: <code class="language-plaintext highlighter-rouge">APIException()</code><br />
<code class="language-plaintext highlighter-rouge">APIView</code>클래스 또는 <code class="language-plaintext highlighter-rouge">@api_view</code>내부에서 발생한 모든 예외에 대한 기본 클래스입니다.<br />
custom exception을 제공하려면, <code class="language-plaintext highlighter-rouge">APIException</code>을 서브클래스화하고 클래스의 <code class="language-plaintext highlighter-rouge">.status_code</code>, <code class="language-plaintext highlighter-rouge">.default_detail</code> 및 <code class="language-plaintext highlighter-rouge">default_code</code>속성을 설정하세요.<br />
예를 들어, API가 가끔 도달 할 수 없는 제3자 서비스에 의존하는 경우, “503 Service Unavailable” HTTP response 코드에 대한 예외를 구현할 수 있습니다. 우리는 이렇게 할 수 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">rest_framework.exceptions</span> <span class="kn">import</span> <span class="n">APIException</span>

<span class="k">class</span> <span class="nc">ServiceUnavailable</span><span class="p">(</span><span class="n">APIException</span><span class="p">):</span>
    <span class="n">status_code</span> <span class="o">=</span> <span class="mi">503</span>
    <span class="n">default_detail</span> <span class="o">=</span> <span class="s">'Service temporarily unavailable, try again later.'</span>
    <span class="n">default_code</span> <span class="o">=</span> <span class="s">'service_unavailable'</span>
</code></pre></div></div>

<h4 id="inspecting-api-exceptions">Inspecting API exceptions</h4>
<p>API exception을 검사하는데 사용할 수 있는 여러 속성이 있습니다. 이를 사용하여 프로젝트에 대한 custom exception를 빌드 할 수 있습니다.<br />
사용 가능한 속성 및 메서드는 다음과 같습니다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">.detail</code> : 오류의 텍스트 설명을 리턴합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">.get_codes()</code> : 오류의 코드 식별자를 반환합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">.get_full_details()</code> : 텍스트 설명과 코드 식별자를 반환합니다.</li>
</ul>

<p>대부분의 경우 오류 세부 사항은 간단한 항목입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">exc</span><span class="p">.</span><span class="n">detail</span><span class="p">)</span>
<span class="n">You</span> <span class="n">do</span> <span class="ow">not</span> <span class="n">have</span> <span class="n">permission</span> <span class="n">to</span> <span class="n">perform</span> <span class="n">this</span> <span class="n">action</span><span class="p">.</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">exc</span><span class="p">.</span><span class="n">get_codes</span><span class="p">())</span>
<span class="n">permission_denied</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">exc</span><span class="p">.</span><span class="n">get_full_details</span><span class="p">())</span>
<span class="p">{</span><span class="s">'message'</span><span class="p">:</span><span class="s">'You do not have permission to perform this action.'</span><span class="p">,</span><span class="s">'code'</span><span class="p">:</span><span class="s">'permission_denied'</span><span class="p">}</span>
</code></pre></div></div>
<p>유효성 검사 오류의 경우 오류 세부 정보는 list나 dict입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">exc</span><span class="p">.</span><span class="n">detail</span><span class="p">)</span>
<span class="p">{</span><span class="s">"name"</span><span class="p">:</span><span class="s">"This field is required."</span><span class="p">,</span><span class="s">"age"</span><span class="p">:</span><span class="s">"A valid integer is required."</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">exc</span><span class="p">.</span><span class="n">get_codes</span><span class="p">())</span>
<span class="p">{</span><span class="s">"name"</span><span class="p">:</span><span class="s">"required"</span><span class="p">,</span><span class="s">"age"</span><span class="p">:</span><span class="s">"invalid"</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">exc</span><span class="p">.</span><span class="n">get_full_details</span><span class="p">())</span>
<span class="p">{</span><span class="s">"name"</span><span class="p">:{</span><span class="s">"message"</span><span class="p">:</span><span class="s">"This field is required."</span><span class="p">,</span><span class="s">"code"</span><span class="p">:</span><span class="s">"required"</span><span class="p">},</span><span class="s">"age"</span><span class="p">:{</span><span class="s">"message"</span><span class="p">:</span><span class="s">"A valid integer is required."</span><span class="p">,</span><span class="s">"code"</span><span class="p">:</span><span class="s">"invalid"</span><span class="p">}}</span>
</code></pre></div></div>

<h3 id="parseerror">ParseError</h3>
<p><strong>Signature</strong>: <code class="language-plaintext highlighter-rouge">ParseError(detail=None, code=None)</code><br />
<code class="language-plaintext highlighter-rouge">request.data</code>에 엑서스 할 때 request에 잘못된 데이터가 포함 된 경우 발생합니다.<br />
기본적으로 이 예외는 HTTP status code “400 Bad Request”로 응답합니다.</p>

<h3 id="authenticationfailed">AuthenticationFailed</h3>
<p><strong>Signature</strong>: <code class="language-plaintext highlighter-rouge">AuthenticationFailed(detail=None, code=None)</code><br />
들어오는 request에 잘못된 인증이 포함될 떄 발생합니다.<br />
기본적으로 이 예외로 인해 HTTP status code “401 Unauthenticated”가 반환되지만, 사용중인 인증 방식에 따라 “403 Forbidden” 응답이 발생할 수도 있습니다. 자세한 내용은 <a href="http://www.django-rest-framework.org/api-guide/authentication/">인증 문서</a>를 참조하세요.</p>

<h3 id="notauthenticated">NotAuthenticated</h3>
<p><strong>Signature</strong>: <code class="language-plaintext highlighter-rouge">NotAuthenticated(detail=None, code=None)</code><br />
인증되지 않은 요청이 권한 검사에 실패하면 발생합니다.<br />
기본적으로 이 예외로 인해 HTTP status code “401 Unauthenticated”가 반환되지만 사용중인 인증 방식에 따라 “403 Forbidden”응답이 발생 할 수도 있습니다. 자세한 내용은 <a href="http://www.django-rest-framework.org/api-guide/authentication/">인증 문서</a>를 참조하세요.</p>

<h3 id="permissiondenied">PermissionDenied</h3>
<p><strong>Signature</strong>: <code class="language-plaintext highlighter-rouge">PermissionDenied(detail=None, code=None)</code><br />
인증 된 요청이 권한 검사에 실패하면 발생합니다.<br />
기본적으로 이 예외는 HTTP status code “403 Forbidden”으로 응답하니다.</p>

<h3 id="notfound">NotFound</h3>
<p><strong>Signature</strong>: <code class="language-plaintext highlighter-rouge">NotFound(detail=None, code=None)</code><br />
주어진 URL에 resource가 없을 때 발생합니다. 이 예외는 표준 <code class="language-plaintext highlighter-rouge">Http404</code> Django exception과 동일합니다.<br />
기본적으로 이 예외는 HTTP status code “404 Not Found”으로 응답합니다.</p>

<h3 id="methodnotallowed">MethodNotAllowed</h3>
<p><strong>Signature</strong>: <code class="language-plaintext highlighter-rouge">MethodNotAllowed(method, detail=None, code=None)</code><br />
뷰의 handler 메서드에 매핑되지 않는 들어오는 request가 발생했을 떄 발생합니다.<br />
기본적으로 이 예외는 HTTP status code “405 Method Not Allowed”로 응답합니다.</p>

<h3 id="notacceptable">NotAcceptable</h3>
<p><strong>Signature</strong>: <code class="language-plaintext highlighter-rouge">NotAcceptable(detail=None, code=None)</code><br />
사용 가능한 randerer에서 만족 할 수 없는 <code class="language-plaintext highlighter-rouge">Accept</code>헤더로 들어오는 request가 발생할때 발생합니다.<br />
기본적으로 이 예외는 HTTP status code “406 Not Acceptable”으로 응답합니다.</p>

<h3 id="unsupportedmediatype">UnsupportedMediaType</h3>
<p><strong>Signature</strong>: <code class="language-plaintext highlighter-rouge">UnsupportedMediaType(media_type, detail=None, code=None)</code><br />
<code class="language-plaintext highlighter-rouge">request.data</code>에 엑서스 할 때 request 데이터의 내용 유형을 처리 할 수 있는 parser가 없는 경우 발생합니다.<br />
기본적으로 이 예외는 HTTP status code “415 Unsupported Media Type”으로 응답합니다.</p>

<h3 id="throttled">Throttled</h3>
<p><strong>Signature</strong>: <code class="language-plaintext highlighter-rouge">Throttled(wait=None, detail=None, code=None)</code><br />
들어오는 request가 throttle 검사에 실패하면 발생합니다.<br />
기본적으로 이 예외는 HTTP status code “429 Too Many Requests”으로 응답합니다.</p>

<h3 id="validationerror">ValidationError</h3>
<p><strong>Signature</strong>: <code class="language-plaintext highlighter-rouge">ValidationError(detail, code=None)</code><br />
<code class="language-plaintext highlighter-rouge">ValidationError</code> 예외는 다른 <code class="language-plaintext highlighter-rouge">APIException</code>클래스와 약간 다릅니다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">detail</code> 인수는 필수입니다. 선택사항이 아닙니다.</li>
  <li><code class="language-plaintext highlighter-rouge">detail</code>인수는 오류 세부 사항 list 또는 dict 일 수 있으며, 중첩된 데이터 구조 일 수도 있습니다.</li>
  <li>규약에 따라 serializer 모듈을 가져와 정규화 된 <code class="language-plaintext highlighter-rouge">ValidationError</code> 스타일을 사용하여 Django의 기본 유효성 검사 오류와 구별해야합니다. 예: <code class="language-plaintext highlighter-rouge">raise serializers.ValidationError('이 필드는 정수(Integer)값이어야 합니다.')</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">ValidationError</code> 클래스는 serializer 및 필드 유효성 검사 및 유효성 검사기 클래스에 사용해야합니다. 또한 <code class="language-plaintext highlighter-rouge">raise_exception</code> 키워드 인수로 <code class="language-plaintext highlighter-rouge">serializer.is_valid</code>를 호출 할 때 발생합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>serializer.is_valid(raise_exception=True)
</code></pre></div></div>
<p>generic view는 <code class="language-plaintext highlighter-rouge">raise_exception=True</code>플래그를 사용합니다. 즉, API에서 유효성 검증 오류 응답의 스타일을 대체할 수 있습니다. 이렇게 하려면 위에서 설명한대로 custom exception handler를 사용하세요.<br />
기본적으로 이 예외는 HTTP status code “400 Bad Request”으로 응답합니다.</p>
:ET