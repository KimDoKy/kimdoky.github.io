I"<p>콘텐츠가 많아지면 콘텐츠들을 페이지로 분할해야 한다.</p>

<p>Django에는 페이지를 쉽게 관리할 수 있는 pagenation 클래스가 내장되어 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.core.paginator</span> <span class="kn">import</span> <span class="n">Paginator</span><span class="p">,</span> <span class="n">EmptyPage</span><span class="p">,</span> <span class="n">PageNotAnInteger</span>

<span class="k">def</span> <span class="nf">post_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">object_list</span> <span class="o">=</span> <span class="n">Post</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>
    <span class="n">paginator</span> <span class="o">=</span> <span class="n">Paginator</span><span class="p">(</span><span class="n">object_list</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="n">page</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">GET</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'page'</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">posts</span> <span class="o">=</span> <span class="n">paginator</span><span class="p">.</span><span class="n">page</span><span class="p">(</span><span class="n">page</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">PageNotAnInteger</span><span class="p">:</span>  <span class="c1"># 페이지가 정수가 아닌 경우
</span>        <span class="n">posts</span> <span class="o">=</span> <span class="n">paginator</span><span class="p">.</span><span class="n">page</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">EmptyPage</span><span class="p">:</span>  <span class="c1"># 페이지가 범위를 벗어나는 경우
</span>        <span class="n">posts</span> <span class="o">=</span> <span class="n">paginator</span><span class="p">.</span><span class="n">page</span><span class="p">(</span><span class="n">paginator</span><span class="p">.</span><span class="n">num_pages</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'blog/post/list.html'</span><span class="p">,</span> <span class="p">{</span><span class="s">'page'</span><span class="p">:</span><span class="n">page</span><span class="p">,</span> <span class="s">'posts'</span><span class="p">:</span><span class="n">posts</span><span class="p">})</span>
</code></pre></div></div>

<p>pagination의 작동흐름이다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">Paginator</code> 클래스를 각 페이지에 표시 할 객체 수로 인스턴스화 한다.</li>
  <li>현재 페이지 번호를 나타내는 GET 매개 변수 페이지를 얻는다.</li>
  <li><code class="language-plaintext highlighter-rouge">Paginator</code>의 <code class="language-plaintext highlighter-rouge">page()</code> 메소드를 호출하는 페이지에 대한 객체를 얻는다.</li>
  <li>페이지 매개 변수가 정수가 아니면 결과의 첫 페이지를 검색한다. 매개 변수가 마지막 페이지보다 큰 숫자라면 마지막 페이지를 검색한다.</li>
  <li>페이지 번호와 검색된 객체를 템플릿에 전달한다.</li>
</ol>

<p>Pagenation을 표시할 템플릿을 생성한다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"pagination"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"step-links"</span><span class="nt">&gt;</span>
  {% if page.has_previous %}
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"?page={{ page.previous_page_number }}"</span><span class="nt">&gt;</span>Previous<span class="nt">&lt;/a&gt;</span>
  {% endif %}
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"current"</span><span class="nt">&gt;</span>
    Page {{ page.number }} of {{ page.paginator.num_pages }}.
  <span class="nt">&lt;/span&gt;</span>
  {% if page.has_next %}
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"?page={{ page.next_page_number }}"</span><span class="nt">&gt;</span>Next<span class="nt">&lt;/a&gt;</span>
  {% endif %}
  <span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>list를 표시하는 템플릿(html)에 적용한다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
{% include "pagination.html" with page=posts %}
</code></pre></div></div>

<p>Django에는 위 기능들을 CBV를 통해 더 쉽게 제공한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.views.generic</span> <span class="kn">import</span> <span class="n">ListView</span>

<span class="k">class</span> <span class="nc">PostListView</span><span class="p">(</span><span class="n">ListView</span><span class="p">):</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Post</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>
    <span class="n">context_object_name</span> <span class="o">=</span> <span class="s">'posts'</span>
    <span class="n">paginate_by</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="n">template_name</span> <span class="o">=</span> <span class="s">'blog/post/list.html'</span>
</code></pre></div></div>

<p>Django의 <code class="language-plaintext highlighter-rouge">ListView</code>는 <code class="language-plaintext highlighter-rouge">page_obj</code>라는 변수에 선택된 페이지를 전달하기 때문에 템플릿도 같이 수정해야 한다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% include "pagination.html" with page=page_obj %}
</code></pre></div></div>

:ET