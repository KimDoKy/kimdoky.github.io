I"<p>간단히 HTTP 메소드 관련 몇 가지 테스트를 위해 django endpoint를 만들었지만</p>

<p>django는 <code class="language-plaintext highlighter-rouge">POST</code> 메소드에서는 <code class="language-plaintext highlighter-rouge">CSRF verification failed. Request aborted.</code> 에러를 발생시켰다.</p>

<p><code class="language-plaintext highlighter-rouge">CSRF</code>가 무엇인지는 여기서는 건너뜁니다.</p>

<p>Django의 공식 문서에서는 FBV의 예만 보여주고 있고, CBV에서는 <a href="https://docs.djangoproject.com/en/2.2/topics/class-based-views/intro/#id1"><code class="language-plaintext highlighter-rouge">Decorating CBV</code></a>으로 구현하라고 한다.</p>

<p>csrf_exempt가 작동하도록 <code class="language-plaintext highlighter-rouge">dispatch</code> 메소드에 데코레이터를 붙여야 한다.</p>

<p>이건 뷰 기능 자체의 csrf_exempt 속성을 True로 설정하고, 미들웨어는 가장 바깥 쪽 뷰 기능에서 이를 확인한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
<span class="kn">from</span> <span class="nn">django.views.generic</span> <span class="kn">import</span> <span class="n">View</span>
<span class="kn">from</span> <span class="nn">django.views.decorators.csrf</span> <span class="kn">import</span> <span class="n">csrf_exempt</span>
<span class="kn">from</span> <span class="nn">django.utils.decorators</span> <span class="kn">import</span> <span class="n">method_decorator</span>

<span class="k">class</span> <span class="nc">ViewTest</span><span class="p">(</span><span class="n">View</span><span class="p">):</span>
   <span class="o">@</span><span class="n">method_decorator</span><span class="p">(</span><span class="n">csrf_exempt</span><span class="p">)</span>
   <span class="k">def</span> <span class="nf">dispatch</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
       <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">ViewTest</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">dispatch</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

   <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
       <span class="n">response</span> <span class="o">=</span> <span class="s">"get test"</span>
       <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>

   <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
       <span class="n">response</span> <span class="o">=</span> <span class="s">"post test"</span>
       <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</code></pre></div></div>
:ET