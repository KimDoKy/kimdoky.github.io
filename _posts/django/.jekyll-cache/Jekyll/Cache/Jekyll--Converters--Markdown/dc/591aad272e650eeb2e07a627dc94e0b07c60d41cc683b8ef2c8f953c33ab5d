I"]L<h1 id="django-rest-framework----parsers">Django REST Framework -  Parsers</h1>

<hr />

<p><em>“Machine interacting web services tend to use more structured formats for sending data than form-encoded, since they’re sending more complex data than simple forms”</em></p>

<p><em>“웹 서비스를 상호 작용하는 기계는 단순한 형식보다 복잡한 데이터를 전송하기 때문에 양식으로 인코딩 된 것보다 데이터 전송에 더 많은 구조화 된 형식을 사용하는 경향이 있습니다.”</em></p>

<p><em>— Malcom Tredinnick, Django developers group</em></p>

<hr />

<h2 id="parsers">Parsers</h2>
<p>REST 프레임워크에는 <code class="language-plaintext highlighter-rouge">Parser</code>클래스가 내장되어 있어 다양한 미디어 타입으로 requests를 수락할 수 있습니다. 또한 <code class="language-plaintext highlighter-rouge">custom parser</code>를 정의 할 수 있어서 API에서 허용하는 미디어 타입을 유연하게 디자인 할 수 있습니다.</p>

<h3 id="how-the-parser-is-determined">How the parser is determined</h3>
<p>뷰에 대한 유효한 parser set은 항상 클래스 목록으로 정의됩니다. <code class="language-plaintext highlighter-rouge">request.data</code>에 액서스하면 REST 프레임워크는 들어오는 request의 <code class="language-plaintext highlighter-rouge">Content-Type</code> 헤더를 검사하고 request 내용을 parse하는데 사용할 <code class="language-plaintext highlighter-rouge">parser</code>를 결정합니다.</p>

<hr />
<p><strong>Note</strong>: 클라이언트 응용 프로그램을 개발할 때는 항상 HTTP request로 데이터를 보낼때 <code class="language-plaintext highlighter-rouge">Content-Type</code>헤더를 설정해야 합니다.<br />
콘텐트 타입을 설정하지 않으면 대부분의 클라이언트는 <code class="language-plaintext highlighter-rouge">'application/x-www-form-urlencoded'</code>를 기본값으로 사용합니다. 이는 원하지 않을 수 있습니다.<br />
예를 들어, <code class="language-plaintext highlighter-rouge">.ajax()</code>메서드로 jQuery를 사용하여 <code class="language-plaintext highlighter-rouge">json</code>으로 인코딩 된 데이터를 보내는 경우, <code class="language-plaintext highlighter-rouge">contentType: 'application/json'</code>설정을 포함해야 합니다.</p>

<hr />

<h3 id="setting-the-parsers">Setting the parsers</h3>
<p><code class="language-plaintext highlighter-rouge">parser</code>의 기본 set은 <code class="language-plaintext highlighter-rouge">DEFAULT_PARSER_CLASSES</code>  설정을 사용하여 전역으로 설정할 수 있습니다. 예를 들어, 다음 설정은 기본 JSON 이나 formdata 대신 JSON 컨텐트가 있는 requests만 허용합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">REST_FRAMEWORK</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'DEFAULT_PARSER_CLASSES'</span><span class="p">:</span> <span class="p">(</span>
        <span class="s">'rest_framework.parsers.JSONParser'</span><span class="p">,</span>
    <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">APIView</code>클래스의 기본 views를 사용하여 개별 view나 viewset에 사용되는 <code class="language-plaintext highlighter-rouge">parser</code>를 설정할 수도 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">rest_framework.parsers</span> <span class="kn">import</span> <span class="n">JSONParser</span>
<span class="kn">from</span> <span class="nn">rest_framework.response</span> <span class="kn">import</span> <span class="n">Response</span>
<span class="kn">from</span> <span class="nn">rest_framework.views</span> <span class="kn">import</span> <span class="n">APIView</span>

<span class="k">class</span> <span class="nc">ExampleView</span><span class="p">(</span><span class="n">APIView</span><span class="p">):</span>
    <span class="s">"""
    A view that can accept POST requests with JSON content.
    """</span>
    <span class="n">parser_classes</span> <span class="o">=</span> <span class="p">(</span><span class="n">JSONParser</span><span class="p">,)</span>

    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">Response</span><span class="p">({</span><span class="s">'received data'</span><span class="p">:</span> <span class="n">request</span><span class="p">.</span><span class="n">data</span><span class="p">})</span>
</code></pre></div></div>
<p>또는 FBV와 함께 <code class="language-plaintext highlighter-rouge">@api_view</code>데코레이터를 사용하는 경우.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">rest_framework.decorators</span> <span class="kn">import</span> <span class="n">api_view</span>
<span class="kn">from</span> <span class="nn">rest_framework.decorators</span> <span class="kn">import</span> <span class="n">parser_classes</span>

<span class="o">@</span><span class="n">api_view</span><span class="p">([</span><span class="s">'POST'</span><span class="p">])</span>
<span class="o">@</span><span class="n">parser_classes</span><span class="p">((</span><span class="n">JSONParser</span><span class="p">,))</span>
<span class="k">def</span> <span class="nf">example_view</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">"""
    A view that can accept POST requests with JSON content.
    """</span>
    <span class="k">return</span> <span class="n">Response</span><span class="p">({</span><span class="s">'received data'</span><span class="p">:</span> <span class="n">request</span><span class="p">.</span><span class="n">data</span><span class="p">})</span>
</code></pre></div></div>

<hr />

<h2 id="api-reference">API Reference</h2>

<h3 id="jsonparser">JSONParser</h3>
<p><code class="language-plaintext highlighter-rouge">JSON</code> request content를 파싱합니다.<br />
<strong>.media_type</strong>: <code class="language-plaintext highlighter-rouge">application/json</code></p>

<h3 id="formparser">FormParser</h3>
<p>HTMl form content를 파싱합니다. <code class="language-plaintext highlighter-rouge">request.data</code>는 데이터의 <code class="language-plaintext highlighter-rouge">QueryDict</code>로 채워집니다.<br />
일반적으로 HTML form data를 완벽하게 지원하기 위해 <code class="language-plaintext highlighter-rouge">FormParser</code>와 <code class="language-plaintext highlighter-rouge">MultiPartParser</code>를 함께 사용하려고 합니다.<br />
<strong>.media_type</strong>: <code class="language-plaintext highlighter-rouge">application/x-www-form-urlencoded</code></p>

<h3 id="multipartparser">MultiPartParser</h3>
<p>파일 업로드를 지원하는 <code class="language-plaintext highlighter-rouge">Multi form content</code>를 파싱합니다. 두 <code class="language-plaintext highlighter-rouge">request.data</code> 모두 <code class="language-plaintext highlighter-rouge">QueryDict</code>로 채워집니다.<br />
일반적으로 HTML form data를 완벽하게 지원하기 위해 <code class="language-plaintext highlighter-rouge">FormParser</code>와 <code class="language-plaintext highlighter-rouge">MultiPartParser</code>를 함께 사용하려고 합니다.<br />
<strong>.media_type</strong>: <code class="language-plaintext highlighter-rouge">multipart/form-data</code></p>

<h3 id="fileuploadparser">FileUploadParser</h3>
<p>가공되지 않은 file upload content를 파싱함니다. <code class="language-plaintext highlighter-rouge">request.data</code> 속성은 업로드 된 파일을 포함하는 단일 키<code class="language-plaintext highlighter-rouge">'file'</code>이 포함된 dict입니다.<br />
<code class="language-plaintext highlighter-rouge">FileUploadParser</code>와 함께 사용 된 view가 파일 이름 URL 키워드 인수로 호출되면 해당 인수가  filename 으로 사용됩니다.<br />
<code class="language-plaintext highlighter-rouge">filename</code> URL 키워드 인수없이 호출되면 클라이언트는 <code class="language-plaintext highlighter-rouge">Content-Disposition</code> HTTP 헤더에 filename을 설정해야 합니다. 예를 들면, <code class="language-plaintext highlighter-rouge">Content-disposition: attachment; filename=upload.jpg</code><br />
<strong>.media_type</strong>: <code class="language-plaintext highlighter-rouge">*/*</code></p>

<h6 id="notes">notes:</h6>

<ul>
  <li><code class="language-plaintext highlighter-rouge">FileUploadParser</code>는 파일을 가공되지 않은 데이터 request으로 업로드 할 수 있는 기본 클라이언트에서 사용하기 위한 것입니다. 웹 기반 업로드 또는 멀티 파트 업로드가 지원되는 기본 클라이언트의 경우 <code class="language-plaintext highlighter-rouge">MultiPartParser</code> 파서를 대신 사용해야합니다.</li>
  <li>이 파서의 <code class="language-plaintext highlighter-rouge">media_type</code>은 모든 콘텐트 타입과 일치하므로 <code class="language-plaintext highlighter-rouge">FileuploadParser</code>는 일반적으로 API view에 설정된 유일한 <code class="language-plaintext highlighter-rouge">parser</code> 이어야 합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">FileUploadParser</code>는 Django의 표준 <code class="language-plaintext highlighter-rouge">FILE_UPLOAD_HANDLERS</code> 설정과 <code class="language-plaintext highlighter-rouge">request.upload_handlers</code> 속성을 고려합니다. 자세한 내용은 <a href="https://docs.djangoproject.com/en/1.10/topics/http/file-uploads/#upload-handlers">Django 문서</a>를 참조하세요.</li>
</ul>

<h6 id="basic-usage-example">Basic usage example:</h6>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># views.py
</span><span class="k">class</span> <span class="nc">FileUploadView</span><span class="p">(</span><span class="n">views</span><span class="p">.</span><span class="n">APIView</span><span class="p">):</span>
    <span class="n">parser_classes</span> <span class="o">=</span> <span class="p">(</span><span class="n">FileUploadParser</span><span class="p">,)</span>

    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">file_obj</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="s">'file'</span><span class="p">]</span>
        <span class="c1"># ...
</span>        <span class="c1"># do some stuff with uploaded file
</span>        <span class="c1"># ...
</span>        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">status</span><span class="o">=</span><span class="mi">204</span><span class="p">)</span>

<span class="c1"># urls.py
</span><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1"># ...
</span>    <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s">'^upload/(?P&lt;filename&gt;[^/]+)$'</span><span class="p">,</span> <span class="n">FileUploadView</span><span class="p">.</span><span class="n">as_view</span><span class="p">())</span>
<span class="p">]</span>
</code></pre></div></div>
<hr />

<h2 id="custom-parsers">Custom parsers</h2>
<p><code class="language-plaintext highlighter-rouge">custom parser</code>를 구현하려면 <code class="language-plaintext highlighter-rouge">BaseParser</code>를 오버라이드하고 <code class="language-plaintext highlighter-rouge">.media_type</code>속성을 설정하고 <code class="language-plaintext highlighter-rouge">.parse(self, stream, media_type, parser_context)</code>메소드를 구현해야 합니다.<br />
메서드는 <code class="language-plaintext highlighter-rouge">request.data</code>속성을 채우는데 사용할 데이터를 반환해야합니다.<br />
<code class="language-plaintext highlighter-rouge">.parse()</code>에 전달된 인수는 다음과 같습니다.</p>

<h3 id="stream">stream</h3>
<p>request의 본문을 나타내는 스트림과 같은 객체입니다.</p>

<h3 id="media_type">media_type</h3>
<p>선택사항. 제공되는 경우 들어오는 request content의 미디어 타입입니다.<br />
request의 <code class="language-plaintext highlighter-rouge">Content-Type:</code> 헤더에 따라 렌더러의 <code class="language-plaintext highlighter-rouge">media_type</code>속성보다 더 구체적일 수 있으며, 미디어 타입 parameter가 포함 될 수 있습니다. 예: <code class="language-plaintext highlighter-rouge">"text/plain; charset=utf-8"</code></p>

<h3 id="parser_context">parser_context</h3>
<p>선택사항. 이 인수가 제공되면 request content을 파싱하는데 필요할 수 있는 추가 context를 포함하는 dict가 됩니다.<br />
기본적으로 <code class="language-plaintext highlighter-rouge">view</code>, <code class="language-plaintext highlighter-rouge">request</code>, <code class="language-plaintext highlighter-rouge">args</code>, <code class="language-plaintext highlighter-rouge">kwargs</code> 키들이 포함됩니다.</p>

<h3 id="example">Example</h3>
<p>다음은 request content를 나타내는 문자열로 <code class="language-plaintext highlighter-rouge">request.data</code>속성을 채우는 일반 텍스트 파서의 예입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PlainTextParser</span><span class="p">(</span><span class="n">BaseParser</span><span class="p">):</span>
    <span class="s">"""
    Plain text parser.
    """</span>
    <span class="n">media_type</span> <span class="o">=</span> <span class="s">'text/plain'</span>

    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">stream</span><span class="p">,</span> <span class="n">media_type</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">parser_context</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="s">"""
        Simply return a string representing the body of the request.
        """</span>
        <span class="k">return</span> <span class="n">stream</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h2 id="third-party-packages">Third party packages</h2>
<p>다음의 타사 패키지도 제공됩니다.</p>

<h3 id="yaml">YAML</h3>
<p><a href="http://jpadilla.github.io/django-rest-framework-yaml/">REST 프레임 워크 YAML</a>은 <a href="http://www.yaml.org/">YAML</a> 파싱 및 렌더링 지원을 제공합니다. 이전에 REST 프레임워크 패키지에 직접 포함되어 있었으며 이제는 타사 패키지로 대신 지원됩니다.</p>

<h6 id="설치-및-구성">설치 및 구성</h6>
<p>pip를 사용하여 설치합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ pip install djangorestframework-yaml
</code></pre></div></div>
<p>REST 프레임워크 설정을 수정하세요.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">REST_FRAMEWORK</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'DEFAULT_PARSER_CLASSES'</span><span class="p">:</span> <span class="p">(</span>
        <span class="s">'rest_framework_yaml.parsers.YAMLParser'</span><span class="p">,</span>
    <span class="p">),</span>
    <span class="s">'DEFAULT_RENDERER_CLASSES'</span><span class="p">:</span> <span class="p">(</span>
        <span class="s">'rest_framework_yaml.renderers.YAMLRenderer'</span><span class="p">,</span>
    <span class="p">),</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="xml">XML</h3>

<p><a href="http://jpadilla.github.io/django-rest-framework-xml/">REST 프레임워크 XML</a>은 간단한 비공식 XML 형식을 제공합니다. 이전에 REST 프레임 워크 패키지에 직접 포함되어 있었으며 이제는 타사 패키지로 대신 지원됩니다.</p>

<h6 id="설치-및-구성-1">설치 및 구성</h6>
<p>pip를 사용하여 설치합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ pip install djangorestframework-xml
</code></pre></div></div>
<p>REST 프레임워크 설정을 수정하세요.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">REST_FRAMEWORK</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'DEFAULT_PARSER_CLASSES'</span><span class="p">:</span> <span class="p">(</span>
        <span class="s">'rest_framework_xml.parsers.XMLParser'</span><span class="p">,</span>
    <span class="p">),</span>
    <span class="s">'DEFAULT_RENDERER_CLASSES'</span><span class="p">:</span> <span class="p">(</span>
        <span class="s">'rest_framework_xml.renderers.XMLRenderer'</span><span class="p">,</span>
    <span class="p">),</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="messagepack">MessagePack</h3>
<p><a href="https://github.com/juanriaza/django-rest-framework-msgpack">MessagePack</a>은 빠르고 효율적인 바이너리 serializer 형식입니다. <a href="https://github.com/juanriaza">Juan Riaza</a>는 MessagePack 렌더러와 REST 프레임 워크에 대한 파서 지원을 제공하는 <a href="https://github.com/juanriaza/django-rest-framework-msgpack">djangorestframework-msgpack 패키지</a>를 유지 관리합니다.</p>

<h3 id="camelcase-json">CamelCase JSON</h3>
<p><a href="https://github.com/vbabiy/djangorestframework-camel-case">djangorestframework-camel-case</a>는 REST 프레임워크를 위한 <code class="language-plaintext highlighter-rouge">parser</code>와 camel-case JSON 렌더러를 제공합니다. 이를 통해 serializer는 파이썬 스타일의 underscored 필드 이름을 사용할 수 있지만, 자바 스크립트 스타일의 camel case field names으로 API에 표시됩니다. 그것은 <a href="https://github.com/vbabiy">Vitaly Babiy</a>에 의해 관리됩니다.</p>
:ET