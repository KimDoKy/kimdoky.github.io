I"v4<blockquote>
  <p><a href="https://docs.djangoproject.com/en/2.2/ref/models/database-functions/">Django Database Functions</a></p>
</blockquote>

<blockquote>
  <p><a href="https://www.w3schools.com/sql/sql_ref_sqlserver.asp">SQL Server Functions</a></p>
</blockquote>

<hr />

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 사용될 모델
</span><span class="k">class</span> <span class="nc">Author</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">age</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">PositiveIntegerField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">alias</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">goes_by</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="비교-변환">비교, 변환</h2>

<h3 id="cast">Cast</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Cast</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">output_field</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">output_field</code>으로 타입을 지정한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Cast</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">age</span><span class="o">=</span><span class="mi">25</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'Margaret Smith'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">author</span> <span class="o">=</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">age_as_float</span><span class="o">=</span><span class="n">Cast</span><span class="p">(</span><span class="s">'age'</span><span class="p">,</span> <span class="n">output_field</span><span class="o">=</span><span class="n">FloatField</span><span class="p">()),</span>
<span class="p">...</span> <span class="p">).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">author</span><span class="p">.</span><span class="n">age_as_float</span><span class="p">)</span>
<span class="mf">25.0</span>
</code></pre></div></div>

<h3 id="coalesce">Coalesce</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Coalesce</span><span class="p">(</span><span class="o">*</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>둘 이상의 필드나 표현식을 지정하면, null이 아닌 첫 번째 값을 리턴한다.(빈 문자열은 null이 아니다.)<br />
텍스트와 숫자를 혼합하면 데이터베이스 오류가 발생한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">Sum</span><span class="p">,</span> <span class="n">Value</span> <span class="k">as</span> <span class="n">V</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Coalesce</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Smith'</span><span class="p">,</span> <span class="n">goes_by</span><span class="o">=</span><span class="s">'Maggie'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">author</span> <span class="o">=</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">screen_name</span><span class="o">=</span><span class="n">Coalesce</span><span class="p">(</span><span class="s">'alias'</span><span class="p">,</span> <span class="s">'goes_by'</span><span class="p">,</span> <span class="s">'name'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">author</span><span class="p">.</span><span class="n">screen_name</span><span class="p">)</span>
<span class="n">Maggie</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">aggregated</span> <span class="o">=</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">aggregate</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">combined_age</span><span class="o">=</span><span class="n">Coalesce</span><span class="p">(</span><span class="n">Sum</span><span class="p">(</span><span class="s">'age'</span><span class="p">),</span> <span class="n">V</span><span class="p">(</span><span class="mi">0</span><span class="p">)),</span>
<span class="p">...</span>    <span class="n">combined_age_default</span><span class="o">=</span><span class="n">Sum</span><span class="p">(</span><span class="s">'age'</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">aggregated</span><span class="p">[</span><span class="s">'combined_age'</span><span class="p">])</span>
<span class="mi">0</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">aggregated</span><span class="p">[</span><span class="s">'combined_age_default'</span><span class="p">])</span>
<span class="bp">None</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; print(author.query)
SELECT "blog_author"."id",
       "blog_author"."name",
       "blog_author"."age",
       "blog_author"."alias",
       "blog_author"."goes_by",
       COALESCE("blog_author"."alias", "blog_author"."goes_by", "blog_author"."name") AS "screen_name"
FROM "blog_author
</code></pre></div></div>

<h3 id="greatest">Greatest</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Greatest</span><span class="p">(</span><span class="o">*</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>둘 이상의 필드나 표현식을 지정하면, 가장 큰 값을 리턴한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Blog</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">body</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">TextField</span><span class="p">()</span>
    <span class="n">modified</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Comment</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">body</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">TextField</span><span class="p">()</span>
    <span class="n">modified</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">blog</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Blog</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">CASCADE</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Greatest</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">blog</span> <span class="o">=</span> <span class="n">Blog</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">body</span><span class="o">=</span><span class="s">'Greatest is the best.'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">comment</span> <span class="o">=</span> <span class="n">Comment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">body</span><span class="o">=</span><span class="s">'No, Least is better.'</span><span class="p">,</span> <span class="n">blog</span><span class="o">=</span><span class="n">blog</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">comments</span> <span class="o">=</span> <span class="n">Comment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">last_updated</span><span class="o">=</span><span class="n">Greatest</span><span class="p">(</span><span class="s">'modified'</span><span class="p">,</span> <span class="s">'blog__modified'</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">annotated_comment</span> <span class="o">=</span> <span class="n">comments</span><span class="p">.</span><span class="n">get</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; print(comments.query)
SELECT "blog_comment"."id",
       "blog_comment"."body",
       "blog_comment"."modified",
       "blog_comment"."blog_id",
       MAX("blog_comment"."modified", "blog_blog"."modified") AS "last_updated"
FROM "blog_comment"
INNER JOIN "blog_blog" ON ("blog_comment"."blog_id" = "blog_blog"."id")
</code></pre></div></div>

<h3 id="least">Least</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Least</span><span class="p">(</span><span class="o">*</span><span class="n">expression</span><span class="p">,</span> <span class="o">*</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>둘 이상의 필드나 표현식을 지정하면, 최소값을 리턴한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Comment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
    <span class="n">first_write</span><span class="o">=</span><span class="n">Least</span><span class="p">(</span>
        <span class="s">'modified'</span><span class="p">,</span> <span class="s">'blog__modified'</span>
        <span class="p">)</span>
      <span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT "blog_comment"."id",
       "blog_comment"."body",
       "blog_comment"."modified",
       "blog_comment"."blog_id",
       MIN("blog_comment"."modified",
           "blog_blog"."modified") AS "first_write"
FROM "blog_comment"
INNER JOIN "blog_blog" ON ("blog_comment"."blog_id" = "blog_blog"."id")
</code></pre></div></div>

<h3 id="nullif">NullIf</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">NullIf</span><span class="p">(</span><span class="n">expression1</span><span class="p">,</span> <span class="n">expression2</span><span class="p">)</span>
</code></pre></div></div>

<p>두 표현식이 일치하면 None을 리턴한다. 두 표현식이 다르면 첫 번째 표현식을 리턴한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">null_if_author</span> <span class="o">=</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
    <span class="n">null_age</span><span class="o">=</span><span class="n">NullIf</span><span class="p">(</span>
        <span class="s">'age'</span><span class="p">,</span> <span class="n">V</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="p">)</span>
    <span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; print(null_if_author.query)
SELECT "blog_author"."id",
       "blog_author"."name",
       "blog_author"."age",
       "blog_author"."alias",
       "blog_author"."goes_by",
       NULLIF("blog_author"."age", 0) AS "null_age"
FROM "blog_author"
</code></pre></div></div>

<h2 id="날짜">날짜</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 사용될 모델
</span><span class="k">class</span> <span class="nc">Experiment</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span><span class="n">å</span>
    <span class="n">start_datetime</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">()</span>
    <span class="n">start_date</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">start_time</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">TimeField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">end_datetime</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">end_date</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">end_time</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">TimeField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="extract">Extract</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Extract</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">lookup_name</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>날짜의 구성 요소를 숫자로 추출한다.</p>

<p>expression 인자에는 <code class="language-plaintext highlighter-rouge">DateField</code>, <code class="language-plaintext highlighter-rouge">DateTimeField</code>, <code class="language-plaintext highlighter-rouge">TimeField</code>, <code class="language-plaintext highlighter-rouge">DurationField</code>, <code class="language-plaintext highlighter-rouge">lookup_name</code>(날짜의 일부인 IntegerField)를 취한다.<br />
<code class="language-plaintext highlighter-rouge">tzinfo</code>는 <code class="language-plaintext highlighter-rouge">pytz</code>를 전달하여 특정 시간대의 값을 추출할 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Extract</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">start</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">end</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">start_datetime</span><span class="o">=</span><span class="n">start</span><span class="p">,</span> <span class="n">start_date</span><span class="o">=</span><span class="n">start</span><span class="p">.</span><span class="n">date</span><span class="p">(),</span>
<span class="p">...</span>    <span class="n">end_datetime</span><span class="o">=</span><span class="n">end</span><span class="p">,</span> <span class="n">end_date</span><span class="o">=</span><span class="n">end</span><span class="p">.</span><span class="n">date</span><span class="p">())</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">experiment</span> <span class="o">=</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">start_year</span><span class="o">=</span><span class="n">Extract</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">,</span> <span class="s">'year'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">experiment</span><span class="p">.</span><span class="n">start_year</span>
<span class="mi">2015</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">start_datetime__year</span><span class="o">=</span><span class="n">Extract</span><span class="p">(</span><span class="s">'end_datetime'</span><span class="p">,</span> <span class="s">'year'</span><span class="p">)).</span><span class="n">count</span><span class="p">()</span>
<span class="mi">1</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT "dbfunction_experiment"."id",
       "dbfunction_experiment"."start_datetime",
       "dbfunction_experiment"."start_date",
       "dbfunction_experiment"."start_time",
       "dbfunction_experiment"."end_datetime",
       "dbfunction_experiment"."end_date",
       "dbfunction_experiment"."end_time",
       django_datetime_extract('year',"dbfunction_experiment"."start_datetime",'UTC')
           AS "start_year"
FROM "dbfunction_experiment"
</code></pre></div></div>

<h4 id="datefield-extracts">DateField extracts</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">class ExtractYear(expression, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">lookup_name='year'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class ExtractIsoYear(expression, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">lookup_name='iso_year'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class ExtractMonth(expression, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">lookup_name='month'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class ExtractDay(expression, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">lookup_name='day'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class ExtractWeekDay(expression, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">lookup_name='week_day'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class ExtractWeek(expression, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">lookup_name='week'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class ExtractQuarter(expression, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">lookup_name='quarter'</code></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.utils</span> <span class="kn">import</span> <span class="n">timezone</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="p">(</span>
<span class="p">...</span>     <span class="n">ExtractDay</span><span class="p">,</span> <span class="n">ExtractMonth</span><span class="p">,</span> <span class="n">ExtractQuarter</span><span class="p">,</span> <span class="n">ExtractWeek</span><span class="p">,</span>
<span class="p">...</span>     <span class="n">ExtractWeekDay</span><span class="p">,</span> <span class="n">ExtractIsoYear</span><span class="p">,</span> <span class="n">ExtractYear</span><span class="p">,</span>
<span class="p">...</span> <span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">start_2015</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">timezone</span><span class="p">.</span><span class="n">utc</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">end_2015</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">timezone</span><span class="p">.</span><span class="n">utc</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">start_datetime</span><span class="o">=</span><span class="n">start_2015</span><span class="p">,</span> <span class="n">start_date</span><span class="o">=</span><span class="n">start_2015</span><span class="p">.</span><span class="n">date</span><span class="p">(),</span>
<span class="p">...</span>    <span class="n">end_datetime</span><span class="o">=</span><span class="n">end_2015</span><span class="p">,</span> <span class="n">end_date</span><span class="o">=</span><span class="n">end_2015</span><span class="p">.</span><span class="n">date</span><span class="p">())</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>     <span class="n">year</span><span class="o">=</span><span class="n">ExtractYear</span><span class="p">(</span><span class="s">'start_date'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">isoyear</span><span class="o">=</span><span class="n">ExtractIsoYear</span><span class="p">(</span><span class="s">'start_date'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">quarter</span><span class="o">=</span><span class="n">ExtractQuarter</span><span class="p">(</span><span class="s">'start_date'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">month</span><span class="o">=</span><span class="n">ExtractMonth</span><span class="p">(</span><span class="s">'start_date'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">week</span><span class="o">=</span><span class="n">ExtractWeek</span><span class="p">(</span><span class="s">'start_date'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">day</span><span class="o">=</span><span class="n">ExtractDay</span><span class="p">(</span><span class="s">'start_date'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">weekday</span><span class="o">=</span><span class="n">ExtractWeekDay</span><span class="p">(</span><span class="s">'start_date'</span><span class="p">),</span>
<span class="p">...</span> <span class="p">).</span><span class="n">values</span><span class="p">(</span><span class="s">'year'</span><span class="p">,</span> <span class="s">'isoyear'</span><span class="p">,</span> <span class="s">'quarter'</span><span class="p">,</span> <span class="s">'month'</span><span class="p">,</span> <span class="s">'week'</span><span class="p">,</span> <span class="s">'day'</span><span class="p">,</span> <span class="s">'weekday'</span><span class="p">).</span><span class="n">get</span><span class="p">(</span>
<span class="p">...</span>     <span class="n">end_date__year</span><span class="o">=</span><span class="n">ExtractYear</span><span class="p">(</span><span class="s">'start_date'</span><span class="p">),</span>
<span class="p">...</span> <span class="p">)</span>
<span class="p">{</span><span class="s">'year'</span><span class="p">:</span> <span class="mi">2015</span><span class="p">,</span> <span class="s">'isoyear'</span><span class="p">:</span> <span class="mi">2015</span><span class="p">,</span> <span class="s">'quarter'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'month'</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s">'week'</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span>
 <span class="s">'day'</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span> <span class="s">'weekday'</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT django_date_extract('year', "dbfunction_experiment"."start_date") AS "year",
       django_date_extract('iso_year', "dbfunction_experiment"."start_date") AS "isoyear",
       django_date_extract('quarter', "dbfunction_experiment"."start_date") AS "quarter",
       django_date_extract('month', "dbfunction_experiment"."start_date") AS "month",
       django_date_extract('week', "dbfunction_experiment"."start_date") AS "week",
       django_date_extract('day', "dbfunction_experiment"."start_date") AS "day",
       django_date_extract('week_day', "dbfunction_experiment"."start_date") AS "weekday"
FROM "dbfunction_experiment"
</code></pre></div></div>

<h4 id="datetimefield-extracts">DateTimeField extracts</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">class ExtractHour(expression, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">lookup_name='hour'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class ExtractMinute(expression, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">lookup_name='minute'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class ExtractSecond(expression, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">lookup_name='second'</code></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.utils</span> <span class="kn">import</span> <span class="n">timezone</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="p">(</span>
<span class="p">...</span>     <span class="n">ExtractDay</span><span class="p">,</span> <span class="n">ExtractHour</span><span class="p">,</span> <span class="n">ExtractMinute</span><span class="p">,</span> <span class="n">ExtractMonth</span><span class="p">,</span>
<span class="p">...</span>     <span class="n">ExtractQuarter</span><span class="p">,</span> <span class="n">ExtractSecond</span><span class="p">,</span> <span class="n">ExtractWeek</span><span class="p">,</span> <span class="n">ExtractWeekDay</span><span class="p">,</span>
<span class="p">...</span>     <span class="n">ExtractYear</span><span class="p">,</span>
<span class="p">...</span> <span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">start_2015</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">timezone</span><span class="p">.</span><span class="n">utc</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">end_2015</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">timezone</span><span class="p">.</span><span class="n">utc</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">start_datetime</span><span class="o">=</span><span class="n">start_2015</span><span class="p">,</span> <span class="n">start_date</span><span class="o">=</span><span class="n">start_2015</span><span class="p">.</span><span class="n">date</span><span class="p">(),</span>
<span class="p">...</span>    <span class="n">end_datetime</span><span class="o">=</span><span class="n">end_2015</span><span class="p">,</span> <span class="n">end_date</span><span class="o">=</span><span class="n">end_2015</span><span class="p">.</span><span class="n">date</span><span class="p">())</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>     <span class="n">year</span><span class="o">=</span><span class="n">ExtractYear</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">isoyear</span><span class="o">=</span><span class="n">ExtractIsoYear</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">quarter</span><span class="o">=</span><span class="n">ExtractQuarter</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">month</span><span class="o">=</span><span class="n">ExtractMonth</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">week</span><span class="o">=</span><span class="n">ExtractWeek</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">day</span><span class="o">=</span><span class="n">ExtractDay</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">weekday</span><span class="o">=</span><span class="n">ExtractWeekDay</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">hour</span><span class="o">=</span><span class="n">ExtractHour</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">minute</span><span class="o">=</span><span class="n">ExtractMinute</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">second</span><span class="o">=</span><span class="n">ExtractSecond</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">),</span>
<span class="p">...</span> <span class="p">).</span><span class="n">values</span><span class="p">(</span>
<span class="p">...</span>     <span class="s">'year'</span><span class="p">,</span> <span class="s">'isoyear'</span><span class="p">,</span> <span class="s">'month'</span><span class="p">,</span> <span class="s">'week'</span><span class="p">,</span> <span class="s">'day'</span><span class="p">,</span>
<span class="p">...</span>     <span class="s">'weekday'</span><span class="p">,</span> <span class="s">'hour'</span><span class="p">,</span> <span class="s">'minute'</span><span class="p">,</span> <span class="s">'second'</span><span class="p">,</span>
<span class="p">...</span> <span class="p">).</span><span class="n">get</span><span class="p">(</span><span class="n">end_datetime__year</span><span class="o">=</span><span class="n">ExtractYear</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">))</span>
<span class="p">{</span><span class="s">'year'</span><span class="p">:</span> <span class="mi">2015</span><span class="p">,</span> <span class="s">'isoyear'</span><span class="p">:</span> <span class="mi">2015</span><span class="p">,</span> <span class="s">'quarter'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'month'</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s">'week'</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span>
 <span class="s">'day'</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span> <span class="s">'weekday'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'hour'</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span> <span class="s">'minute'</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s">'second'</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">pytz</code>으로 다른 시간대로 변경하여 추출할 수 있고, <code class="language-plaintext highlighter-rouge">Extract()</code>에 명시적으로 전달하면 최우선시 된다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">pytz</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">kor</span> <span class="o">=</span> <span class="n">pytz</span><span class="p">.</span><span class="n">timezone</span><span class="p">(</span><span class="s">'Asia/Seoul'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...:</span>     <span class="n">day</span><span class="o">=</span><span class="n">ExtractDay</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">kor</span><span class="p">),</span>
<span class="p">...:</span>     <span class="n">weekday</span><span class="o">=</span><span class="n">ExtractWeekDay</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">kor</span><span class="p">),</span>
<span class="p">...:</span>     <span class="n">hour</span><span class="o">=</span><span class="n">ExtractHour</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">kor</span><span class="p">),</span>
<span class="p">...:</span>     <span class="p">).</span><span class="n">values</span><span class="p">(</span>
<span class="p">...:</span>         <span class="s">'day'</span><span class="p">,</span> <span class="s">'weekday'</span><span class="p">,</span> <span class="s">'hour'</span><span class="p">).</span><span class="n">query</span><span class="p">)</span>
<span class="p">{</span><span class="s">'day'</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span> <span class="s">'weekday'</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">'hour'</span><span class="p">:</span> <span class="mi">9</span><span class="p">}</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT django_datetime_extract(
           'day', "dbfunction_experiment"."start_datetime", 'Asia/Seoul'
          ) AS "day",
       django_datetime_extract(
           'week_day', "dbfunction_experiment"."start_datetime", 'Asia/Seoul'
          ) AS "weekday",
       django_datetime_extract(
           'hour', "dbfunction_experiment"."start_datetime", 'Asia/Seoul'
          ) AS "hour"
FROM "dbfunction_experiment"
</code></pre></div></div>

<h3 id="now">Now</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Now</span>
</code></pre></div></div>

<p>쿼리가 실행될 때 SQL을 사용하여 DB 서버의 현재 날짜와 시간을 반환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Now</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Article</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">published__lte</span><span class="o">=</span><span class="n">Now</span><span class="p">())</span>
<span class="o">&lt;</span><span class="n">QuerySet</span> <span class="p">[</span><span class="o">&lt;</span><span class="n">Article</span><span class="p">:</span> <span class="n">How</span> <span class="n">to</span> <span class="n">Django</span><span class="o">&gt;</span><span class="p">]</span><span class="o">&gt;</span>
</code></pre></div></div>

<blockquote>
  <p>PostgreSQL에서 <code class="language-plaintext highlighter-rouge">CURRENT_TIMESTAMP</code>는 트랜잭션이 시작된 시간을 반환한다. DB 호환성을 위해 Now()는 <code class="language-plaintext highlighter-rouge">CURRENT_TIMESTAMP</code> 대신 <code class="language-plaintext highlighter-rouge">STATENEBT_TIMESTAMP</code>를 사용해야 한다. 트랜잭션 타임스탬프가 필요하다면 <code class="language-plaintext highlighter-rouge">django.contrib.postgres.functions.TransactionNow</code>를 사용하면 된다.</p>
</blockquote>

<h3 id="trunc">Trunc</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Trunc</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">kind</span><span class="p">,</span> <span class="n">output_field</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>중요한 구성 요소까지 날짜를 자른다. 정확한 초까지는 필요없는 경우 사용한다. 예를 들어 하루 판매량을 계산할 때 사용할 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">Count</span><span class="p">,</span> <span class="n">DateTimeField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Trunc</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">start_datetime</span><span class="o">=</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">321</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">start_datetime</span><span class="o">=</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">123</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">start_datetime</span><span class="o">=</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">999</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">experiments_per_day</span> <span class="o">=</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">start_day</span><span class="o">=</span><span class="n">Trunc</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">,</span> <span class="s">'day'</span><span class="p">,</span> <span class="n">output_field</span><span class="o">=</span><span class="n">DateTimeField</span><span class="p">())</span>
<span class="p">...</span> <span class="p">).</span><span class="n">values</span><span class="p">(</span><span class="s">'start_day'</span><span class="p">).</span><span class="n">annotate</span><span class="p">(</span><span class="n">experiments</span><span class="o">=</span><span class="n">Count</span><span class="p">(</span><span class="s">'id'</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">exp</span> <span class="ow">in</span> <span class="n">experiments_per_day</span><span class="p">:</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">exp</span><span class="p">[</span><span class="s">'start_day'</span><span class="p">],</span> <span class="n">exp</span><span class="p">[</span><span class="s">'experiments'</span><span class="p">])</span>
<span class="p">...</span>
<span class="mi">2015</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span> <span class="mi">2</span>
<span class="mi">2015</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">25</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span> <span class="mi">1</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="n">django_datetime_trunc</span><span class="p">(</span>
            <span class="s">'day'</span><span class="p">,</span> <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_datetime"</span><span class="p">,</span> <span class="s">'UTC'</span>
            <span class="p">)</span> <span class="n">AS</span> <span class="s">"start_day"</span><span class="p">,</span>
       <span class="n">COUNT</span><span class="p">(</span><span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"id"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"experiments"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_experiment"</span>
<span class="n">GROUP</span> <span class="n">BY</span> <span class="n">django_datetime_trunc</span><span class="p">(</span><span class="s">'day'</span><span class="p">,</span> <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_datetime"</span><span class="p">,</span> <span class="s">'UTC'</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">experiments</span> <span class="o">=</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">start_day</span><span class="o">=</span><span class="n">Trunc</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">,</span> <span class="s">'day'</span><span class="p">,</span> <span class="n">output_field</span><span class="o">=</span><span class="n">DateTimeField</span><span class="p">())</span>
<span class="p">...</span> <span class="p">).</span><span class="nb">filter</span><span class="p">(</span><span class="n">start_day</span><span class="o">=</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">15</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">exp</span> <span class="ow">in</span> <span class="n">experiments</span><span class="p">:</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">start_datetime</span><span class="p">)</span>
<span class="p">...</span>
<span class="mi">2015</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">15</span> <span class="mi">14</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mf">50.000321</span>
<span class="mi">2015</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">15</span> <span class="mi">14</span><span class="p">:</span><span class="mi">40</span><span class="p">:</span><span class="mf">02.000123</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_datetime"</span><span class="p">,</span>
       <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_date"</span><span class="p">,</span>
       <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_time"</span><span class="p">,</span>
       <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"end_datetime"</span><span class="p">,</span>
       <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"end_date"</span><span class="p">,</span>
       <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"end_time"</span><span class="p">,</span>
       <span class="n">django_datetime_trunc</span><span class="p">(</span>
           <span class="s">'day'</span><span class="p">,</span> <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_datetime"</span><span class="p">,</span> <span class="s">'UTC'</span>
           <span class="p">)</span> <span class="n">AS</span> <span class="s">"start_day"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_experiment"</span>
<span class="n">WHERE</span> <span class="n">django_datetime_trunc</span><span class="p">(</span><span class="s">'day'</span><span class="p">,</span> <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_datetime"</span><span class="p">,</span> <span class="s">'UTC'</span><span class="p">)</span> <span class="o">=</span> <span class="mi">2015</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span>
</code></pre></div></div>

<h4 id="datefield-truncation">DateField truncation</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">class TruncYear(expression, output_field=None, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">kind='year'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class TruncMonth(expression, output_field=None, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">kind='month'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class TruncWeek(expression, output_field=None, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">kind='week'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class TruncQuarter(expression, output_field=None, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">kind='quarter'</code></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">Count</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">TruncMonth</span><span class="p">,</span> <span class="n">TruncYear</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.utils</span> <span class="kn">import</span> <span class="n">timezone</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">start1</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">321</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">timezone</span><span class="p">.</span><span class="n">utc</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">start2</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">timezone</span><span class="p">.</span><span class="n">utc</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">start3</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">999</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">timezone</span><span class="p">.</span><span class="n">utc</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">start_datetime</span><span class="o">=</span><span class="n">start1</span><span class="p">,</span> <span class="n">start_date</span><span class="o">=</span><span class="n">start1</span><span class="p">.</span><span class="n">date</span><span class="p">())</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">start_datetime</span><span class="o">=</span><span class="n">start2</span><span class="p">,</span> <span class="n">start_date</span><span class="o">=</span><span class="n">start2</span><span class="p">.</span><span class="n">date</span><span class="p">())</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">start_datetime</span><span class="o">=</span><span class="n">start3</span><span class="p">,</span> <span class="n">start_date</span><span class="o">=</span><span class="n">start3</span><span class="p">.</span><span class="n">date</span><span class="p">())</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">experiments_per_year</span> <span class="o">=</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">year</span><span class="o">=</span><span class="n">TruncYear</span><span class="p">(</span><span class="s">'start_date'</span><span class="p">)).</span><span class="n">values</span><span class="p">(</span><span class="s">'year'</span><span class="p">).</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">experiments</span><span class="o">=</span><span class="n">Count</span><span class="p">(</span><span class="s">'id'</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">exp</span> <span class="ow">in</span> <span class="n">experiments_per_year</span><span class="p">:</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">exp</span><span class="p">[</span><span class="s">'year'</span><span class="p">],</span> <span class="n">exp</span><span class="p">[</span><span class="s">'experiments'</span><span class="p">])</span>
<span class="p">...</span>
<span class="mi">2014</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">01</span> <span class="mi">1</span>
<span class="mi">2015</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">01</span> <span class="mi">2</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="n">django_date_trunc</span><span class="p">(</span>
        <span class="s">'year'</span><span class="p">,</span> <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_date"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"year"</span><span class="p">,</span>
       <span class="n">COUNT</span><span class="p">(</span><span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"id"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"experiments"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_experiment"</span>
<span class="n">GROUP</span> <span class="n">BY</span> <span class="n">django_date_trunc</span><span class="p">(</span><span class="s">'year'</span><span class="p">,</span> <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_date"</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">pytz</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">kor</span> <span class="o">=</span> <span class="n">pytz</span><span class="p">.</span><span class="n">timezone</span><span class="p">(</span><span class="s">'Asia/Seoul'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">experiments_per_month</span> <span class="o">=</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">month</span><span class="o">=</span><span class="n">TruncMonth</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">kor</span><span class="p">)).</span><span class="n">values</span><span class="p">(</span><span class="s">'month'</span><span class="p">).</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">experiments</span><span class="o">=</span><span class="n">Count</span><span class="p">(</span><span class="s">'id'</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">exp</span> <span class="ow">in</span> <span class="n">experiments_per_month</span><span class="p">:</span>
<span class="p">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">exp</span><span class="p">[</span><span class="s">'month'</span><span class="p">],</span> <span class="n">exp</span><span class="p">[</span><span class="s">'experiments'</span><span class="p">])</span>
<span class="p">...</span>
<span class="mi">2015</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">+</span><span class="mi">10</span><span class="p">:</span><span class="mi">00</span> <span class="mi">1</span>
<span class="mi">2016</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">+</span><span class="mi">11</span><span class="p">:</span><span class="mi">00</span> <span class="mi">1</span>
<span class="mi">2014</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">+</span><span class="mi">10</span><span class="p">:</span><span class="mi">00</span> <span class="mi">1</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="n">django_datetime_trunc</span><span class="p">(</span>
        <span class="s">'month'</span><span class="p">,</span> <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_datetime"</span><span class="p">,</span> <span class="s">'Asia/Seoul'</span>
       <span class="p">)</span> <span class="n">AS</span> <span class="s">"month"</span><span class="p">,</span>
       <span class="n">COUNT</span><span class="p">(</span><span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"id"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"experiments"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_experiment"</span>
<span class="n">GROUP</span> <span class="n">BY</span> <span class="n">django_datetime_trunc</span><span class="p">(</span>
    <span class="s">'month'</span><span class="p">,</span> <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_datetime"</span><span class="p">,</span> <span class="s">'Asia/Seoul'</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="datetimefield-truncation">DateTimeField truncation</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">class TruncDate(expression, **extra)</code> / <code class="language-plaintext highlighter-rouge">lookup_name='date', ouput_field=DateField()</code></li>
  <li><code class="language-plaintext highlighter-rouge">class TruncTime(expression, **extra)</code> / <code class="language-plaintext highlighter-rouge">lookup_name='time', ouput_field=TimeField()</code></li>
  <li><code class="language-plaintext highlighter-rouge">class TruncDay(expression, output_field=None, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">kind='day'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class TruncHour(expression, output_field=None, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">kind='hour'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class TruncMinute(expression, output_field=None, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">kind='minute'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class TruncSecond(expression, output_field=None, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">kind='second'</code></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">date</span><span class="p">,</span> <span class="n">datetime</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">Count</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="p">(</span>
<span class="p">...</span>     <span class="n">TruncDate</span><span class="p">,</span> <span class="n">TruncDay</span><span class="p">,</span> <span class="n">TruncHour</span><span class="p">,</span> <span class="n">TruncMinute</span><span class="p">,</span> <span class="n">TruncSecond</span><span class="p">,</span>
<span class="p">...</span> <span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.utils</span> <span class="kn">import</span> <span class="n">timezone</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">pytz</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">start1</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">321</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">timezone</span><span class="p">.</span><span class="n">utc</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">start_datetime</span><span class="o">=</span><span class="n">start1</span><span class="p">,</span> <span class="n">start_date</span><span class="o">=</span><span class="n">start1</span><span class="p">.</span><span class="n">date</span><span class="p">())</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">kor</span> <span class="o">=</span> <span class="n">pytz</span><span class="p">.</span><span class="n">timezone</span><span class="p">(</span><span class="s">'Asia/Seoul'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Experiment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>     <span class="n">date</span><span class="o">=</span><span class="n">TruncDate</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">day</span><span class="o">=</span><span class="n">TruncDay</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">kor</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">hour</span><span class="o">=</span><span class="n">TruncHour</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">kor</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">minute</span><span class="o">=</span><span class="n">TruncMinute</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">),</span>
<span class="p">...</span>     <span class="n">second</span><span class="o">=</span><span class="n">TruncSecond</span><span class="p">(</span><span class="s">'start_datetime'</span><span class="p">),</span>
<span class="p">...</span> <span class="p">).</span><span class="n">values</span><span class="p">(</span><span class="s">'date'</span><span class="p">,</span> <span class="s">'day'</span><span class="p">,</span> <span class="s">'hour'</span><span class="p">,</span> <span class="s">'minute'</span><span class="p">,</span> <span class="s">'second'</span><span class="p">).</span><span class="n">get</span><span class="p">()</span>
<span class="p">{</span><span class="s">'date'</span><span class="p">:</span> <span class="n">datetime</span><span class="p">.</span><span class="n">date</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span>
 <span class="s">'day'</span><span class="p">:</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=&lt;</span><span class="n">DstTzInfo</span> <span class="s">'Asia/Seoul'</span> <span class="n">AEST</span><span class="o">+</span><span class="mi">9</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span> <span class="n">STD</span><span class="o">&gt;</span><span class="p">),</span>
 <span class="s">'hour'</span><span class="p">:</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=&lt;</span><span class="n">DstTzInfo</span> <span class="s">'Asia/Seoul'</span> <span class="n">AEST</span><span class="o">+</span><span class="mi">9</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span> <span class="n">STD</span><span class="o">&gt;</span><span class="p">),</span>
 <span class="s">'minute'</span><span class="p">:</span> <span class="s">'minute'</span><span class="p">:</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=&lt;</span><span class="n">UTC</span><span class="o">&gt;</span><span class="p">),</span>
 <span class="s">'second'</span><span class="p">:</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=&lt;</span><span class="n">UTC</span><span class="o">&gt;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="n">django_datetime_cast_date</span><span class="p">(</span>
        <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_datetime"</span><span class="p">,</span> <span class="s">'UTC'</span>
        <span class="p">)</span> <span class="n">AS</span> <span class="s">"date"</span><span class="p">,</span>
       <span class="n">django_datetime_trunc</span><span class="p">(</span>
        <span class="s">'day'</span><span class="p">,</span> <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_datetime"</span><span class="p">,</span> <span class="s">'Asia/Seoul'</span>
        <span class="p">)</span> <span class="n">AS</span> <span class="s">"day"</span><span class="p">,</span>
       <span class="n">django_datetime_trunc</span><span class="p">(</span>
        <span class="s">'hour'</span><span class="p">,</span> <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_datetime"</span><span class="p">,</span> <span class="s">'Asia/Seoul'</span>
        <span class="p">)</span> <span class="n">AS</span> <span class="s">"hour"</span><span class="p">,</span>
       <span class="n">django_datetime_trunc</span><span class="p">(</span>
         <span class="s">'minute'</span><span class="p">,</span> <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_datetime"</span><span class="p">,</span> <span class="s">'UTC'</span>
       <span class="p">)</span> <span class="n">AS</span> <span class="s">"minute"</span><span class="p">,</span>
       <span class="n">django_datetime_trunc</span><span class="p">(</span>
         <span class="s">'second'</span><span class="p">,</span> <span class="s">"dbfunction_experiment"</span><span class="p">.</span><span class="s">"start_datetime"</span><span class="p">,</span> <span class="s">'UTC'</span>
       <span class="p">)</span> <span class="n">AS</span> <span class="s">"second"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_experiment"</span>
</code></pre></div></div>

<h4 id="timefield-truncation">TimeField truncation</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">class TruncHour(expression, output_field=None, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">kind='hour'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class TruncMinute(expression, output_field=None, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">kind='minute'</code></li>
  <li><code class="language-plaintext highlighter-rouge">class TruncSecond(expression, output_field=None, tzinfo=None, **extra)</code> / <code class="language-plaintext highlighter-rouge">kind='second'</code></li>
</ul>

<h2 id="수학-함수">수학 함수</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 사용될 모델
</span><span class="k">class</span> <span class="nc">Vector</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">FloatField</span><span class="p">()</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">FloatField</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="abs">Abs</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Abs</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>숫자 필드나 표현식의 절대값을 리턴한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Abs</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=-</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">1.1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_abs</span><span class="o">=</span><span class="n">Abs</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_abs</span><span class="o">=</span><span class="n">Abs</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_abs</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_abs</span>
<span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.1</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">ABS</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_abs"</span><span class="p">,</span>
       <span class="n">ABS</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_abs"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">Abs</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__abs__lt</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">y__abs__lt</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>
<span class="n">WHERE</span> <span class="p">(</span><span class="n">ABS</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">1.0</span> <span class="n">AND</span>
       <span class="n">ABS</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">1.0</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="acos">ACos</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ACos</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>
<blockquote>
  <p>Arc cosine: 역삼각함수 중 하나로, 코사인을 분모로 내린 역함수 <a href="https://www.scienceall.com/%EC%95%84%ED%81%AC%EC%BD%94%EC%82%AC%EC%9D%B8arccosarccosine/">참고</a></p>
</blockquote>

<p>숫자 필드나 표현식의 아크 코사인을 반환한다. 표현식 값은 -1 ~ 1 사이여야 한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">ACos</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">y</span><span class="o">=-</span><span class="mf">0.9</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_acos</span><span class="o">=</span><span class="n">ACos</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_acos</span><span class="o">=</span><span class="n">ACos</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_acos</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_acos</span>
<span class="p">(</span><span class="mf">1.0471975511965979</span><span class="p">,</span> <span class="mf">2.6905658417935308</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">ACOS</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_acos"</span><span class="p">,</span> <span class="n">ACOS</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_acos"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">ACos</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__acos__lt</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">y__acos__lt</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="asin">ASin</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ASin</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>숫자 필드나 표현식의 아크 사인을 반환한다. 표현식은 -1 ~ 1 사이여야 한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">ASin</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_asin</span><span class="o">=</span><span class="n">ASin</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_asin</span><span class="o">=</span><span class="n">ASin</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_asin</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_asin</span>
<span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.5707963267948966</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">ASIN</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_asin"</span><span class="p">,</span> <span class="n">ASIN</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_sin"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">ASin</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__asin__lt</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">y__asin__lt</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="atan">ATan</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ATan</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>
<p>숫자 필드나 표현식을 아크 탄젠트로 반환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">ATan</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">3.12</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">6.987</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_atan</span><span class="o">=</span><span class="n">ATan</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_atan</span><span class="o">=</span><span class="n">ATan</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_atan</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_atan</span>
<span class="p">(</span><span class="mf">1.2606282660069106</span><span class="p">,</span> <span class="mf">1.428638798133829</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">ATAN</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_atan"</span><span class="p">,</span>
       <span class="n">ATAN</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_atan"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">ATan</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c1"># Get vectors whose arctangent is less than 2
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__atan__lt</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">y__atan__lt</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="atan2">ATan2</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ATan2</span><span class="p">(</span><span class="n">expression1</span><span class="p">,</span> <span class="n">expression2</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>expression1 / expression2 의 아크 탄젠트를 반환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">ATan2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">2.5</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">1.9</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">atan2</span><span class="o">=</span><span class="n">ATan2</span><span class="p">(</span><span class="s">'x'</span><span class="p">,</span> <span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">atan2</span>
<span class="mf">0.9209258773829491</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">ATAN2</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"atan2"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>
</code></pre></div></div>

<h3 id="ceil">Ceil</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Ceil</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>숫자 필드나 표현식보다 크거나 같은 가장 작은 정수를 반환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Ceil</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">3.12</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">7.0</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_ceil</span><span class="o">=</span><span class="n">Ceil</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_ceil</span><span class="o">=</span><span class="n">Ceil</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_ceil</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_ceil</span>
<span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">CEILING</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_ceil"</span><span class="p">,</span>
       <span class="n">CEILING</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_ceil"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">Ceil</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c1"># Get vectors whose ceil is less than 10
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__ceil__lt</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">y__ceil__lt</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="cos">Cos</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Cos</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>숫자 필드나 표현식의 코사인을 반환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Cos</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=-</span><span class="mf">8.0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">3.1415926</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_cos</span><span class="o">=</span><span class="n">Cos</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_cos</span><span class="o">=</span><span class="n">Cos</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_cos</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_cos</span>
<span class="p">(</span><span class="o">-</span><span class="mf">0.14550003380861354</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.9999999999999986</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">COS</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_cos"</span><span class="p">,</span>
       <span class="n">COS</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_cos"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">Cos</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c1"># Get vectors whose cosine is less than 0.5
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__cos__lt</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">y__cos__lt</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="cot">Cot</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Cot</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>숫자 필드나 표현식의 코탄젠트를 반환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Cot</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">12.0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">1.0</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_cot</span><span class="o">=</span><span class="n">Cot</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_cot</span><span class="o">=</span><span class="n">Cot</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_cot</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_cot</span>
<span class="p">(</span><span class="o">-</span><span class="mf">1.5726734063976826</span><span class="p">,</span> <span class="mf">0.642092615934331</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">COT</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_cot"</span><span class="p">,</span>
       <span class="n">COT</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_cot"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">Cot</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c1"># Get vectors whose cotangent is less than 1
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__cot__lt</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">y__cot__lt</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="degrees">Degrees</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Degrees</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>숫자 필드나 표현식을 리디안 단위로 변환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Degrees</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=-</span><span class="mf">1.57</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">3.14</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_d</span><span class="o">=</span><span class="n">Degrees</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_d</span><span class="o">=</span><span class="n">Degrees</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_d</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_d</span>
<span class="p">(</span><span class="o">-</span><span class="mf">89.95437383553924</span><span class="p">,</span> <span class="mf">179.9087476710785</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">DEGREES</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_d"</span><span class="p">,</span>
       <span class="n">DEGREES</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_d"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">Degrees</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c1"># Get vectors whose degrees are less than 360
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__degrees__lt</span><span class="o">=</span><span class="mi">360</span><span class="p">,</span> <span class="n">y__degrees__lt</span><span class="o">=</span><span class="mi">360</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="exp">Exp</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Exp</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>숫자 필드나 표현식의 거듭제곱으로 올린(자연 로그 밑) 값을 반환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Exp</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">5.4</span><span class="p">,</span> <span class="n">y</span><span class="o">=-</span><span class="mf">2.0</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_exp</span><span class="o">=</span><span class="n">Exp</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_exp</span><span class="o">=</span><span class="n">Exp</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_exp</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_exp</span>
<span class="p">(</span><span class="mf">221.40641620418717</span><span class="p">,</span> <span class="mf">0.1353352832366127</span><span class="p">)</span>

<span class="c1"># Query
</span>
<span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">EXP</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_exp"</span><span class="p">,</span>
       <span class="n">EXP</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_exp"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">Exp</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c1"># Get vectors whose exp() is greater than 10
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__exp__gt</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">y__exp__gt</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="floor">Floor</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Floor</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>숫자 필드나 표현식보다 크지 않은 최대 정수값을 반환</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Floor</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">5.4</span><span class="p">,</span> <span class="n">y</span><span class="o">=-</span><span class="mf">2.3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_floor</span><span class="o">=</span><span class="n">Floor</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_floor</span><span class="o">=</span><span class="n">Floor</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_floor</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_floor</span>
<span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.0</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">FLOOR</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_floor"</span><span class="p">,</span>
       <span class="n">FLOOR</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_floor"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">Floor</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c1"># Get vectors whose floor() is greater than 10
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__floor__gt</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">y__floor__gt</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="ln">Ln</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Ln</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>자연 로그에 숫자 필드나 표현식을 리턴한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Ln</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">5.4</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">233.0</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_ln</span><span class="o">=</span><span class="n">Ln</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_ln</span><span class="o">=</span><span class="n">Ln</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_ln</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_ln</span>
<span class="p">(</span><span class="mf">1.6863989535702288</span><span class="p">,</span> <span class="mf">5.4510384535657</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">LN</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_ln"</span><span class="p">,</span>
       <span class="n">LN</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_ln"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">Ln</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c1"># Get vectors whose value greater than e
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__ln__gt</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">y__ln__gt</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="log">Log</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Log</span><span class="p">(</span><span class="n">expression1</span><span class="p">,</span> <span class="n">expression2</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>두 개의 숫자 필드나 표현식을 지정하고, 첫 번째 로그를 두 번째 베이스에 리턴한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Log</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">2.0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">4.0</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">log</span><span class="o">=</span><span class="n">Log</span><span class="p">(</span><span class="s">'x'</span><span class="p">,</span> <span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">log</span>
<span class="mf">2.0</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">LOG</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"log"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>
</code></pre></div></div>

<h3 id="mod">Mod</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Mod</span><span class="p">(</span><span class="n">expression1</span><span class="p">,</span> <span class="n">expression2</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>두 개의 숫자 필드나 표현식을 받아서 첫 번째의 나머지를 두 번째로 나눈 값을 반환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Mod</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">5.4</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">2.3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">mod</span><span class="o">=</span><span class="n">Mod</span><span class="p">(</span><span class="s">'x'</span><span class="p">,</span> <span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">mod</span>
<span class="mf">0.8</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">MOD</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"mod"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>
</code></pre></div></div>

<h3 id="pi">Pi</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Pi</span><span class="p">(</span><span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>상수 π를 반환한다.</p>

<h3 id="power">Power</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Power</span><span class="p">(</span><span class="n">expression1</span><span class="p">,</span> <span class="n">expression2</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>두 개의 숫자 필드나 표현식을 받아서, 첫 번째로 올린 값을 두 번째로 거든 제곱한 값을 리턴한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Power</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">y</span><span class="o">=-</span><span class="mi">2</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">power</span><span class="o">=</span><span class="n">Power</span><span class="p">(</span><span class="s">'x'</span><span class="p">,</span> <span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">power</span>
<span class="mf">0.25</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">POWER</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"power"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>
</code></pre></div></div>

<h3 id="radians">Radians</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Radians</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>숫자 필드나 표현식에서 도를 라디안으로 변환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Radians</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=-</span><span class="mi">90</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">180</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_r</span><span class="o">=</span><span class="n">Radians</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_r</span><span class="o">=</span><span class="n">Radians</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_r</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_r</span>
<span class="p">(</span><span class="o">-</span><span class="mf">1.5707963267948966</span><span class="p">,</span> <span class="mf">3.141592653589793</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">RADIANS</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_r"</span><span class="p">,</span>
       <span class="n">RADIANS</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_r"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">Radians</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c1"># Get vectors whose radians are less than 1
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__radians__lt</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">y__radians__lt</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="round">Round</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Round</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>숫자 필드나 표현식을 가장 가까운 정수로 반올림하여 반환한다. 반올림이나 내림 여부는 DB에 따라 다름</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Round</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">5.4</span><span class="p">,</span> <span class="n">y</span><span class="o">=-</span><span class="mf">2.3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_r</span><span class="o">=</span><span class="n">Round</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_r</span><span class="o">=</span><span class="n">Round</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_r</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_r</span>
<span class="p">(</span><span class="mf">5.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.0</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">ROUND</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_r"</span><span class="p">,</span>
       <span class="n">ROUND</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_r"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">Round</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c1"># Get vectors whose round() is less than 20
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__round__lt</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">y__round__lt</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="sin">Sin</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Sin</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>숫자 필드나 표현식의 사인을 반환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Sin</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">5.4</span><span class="p">,</span> <span class="n">y</span><span class="o">=-</span><span class="mf">2.3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_sin</span><span class="o">=</span><span class="n">Sin</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_sin</span><span class="o">=</span><span class="n">Sin</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_sin</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_sin</span>
<span class="p">(</span><span class="o">-</span><span class="mf">0.7727644875559871</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.7457052121767203</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">SIN</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_sin"</span><span class="p">,</span>
       <span class="n">SIN</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_sin"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">Sin</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c1"># Get vectors whose sin() is less than 0
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__sin__lt</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y__sin__lt</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="sqrt">Sqrt</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Sqrt</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>음수가 아닌 숫자 필드나 표현식의 제곱근을 리턴한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Sqrt</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mf">4.0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">12.0</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_sqrt</span><span class="o">=</span><span class="n">Sqrt</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_sqrt</span><span class="o">=</span><span class="n">Sqrt</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_sqrt</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_sqrt</span>
<span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.46410</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">SQRT</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_sqrt"</span><span class="p">,</span>
       <span class="n">SQRT</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_sqrt"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">Sqrt</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c1"># Get vectors whose sqrt() is less than 5
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__sqrt__lt</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">y__sqrt__lt</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="tan">Tan</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Tan</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>숫자 필드나 표현식의 탄젠트를 반환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Tan</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">x_tan</span><span class="o">=</span><span class="n">Tan</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span> <span class="n">y_tan</span><span class="o">=</span><span class="n">Tan</span><span class="p">(</span><span class="s">'y'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">vector</span><span class="p">.</span><span class="n">x_tan</span><span class="p">,</span> <span class="n">vector</span><span class="p">.</span><span class="n">y_tan</span>
<span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.6358599286615808</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">,</span>
       <span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">,</span>
       <span class="n">TAN</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"x"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"x_tan"</span><span class="p">,</span>
       <span class="n">TAN</span><span class="p">(</span><span class="s">"dbfunction_vector"</span><span class="p">.</span><span class="s">"y"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"y_tan"</span>
<span class="n">FROM</span> <span class="s">"dbfunction_vector"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">FloatField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">FloatField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">Tan</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c1"># Get vectors whose tangent is less than 0
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">vectors</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">x__tan__lt</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y__tan__lt</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="텍스트-기능">텍스트 기능</h2>

<h3 id="chr">Chr</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Chr</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>숫자 필드나 표현식을 받아서, 표현식의 텍스트를 단일 문자로 리턴한다.<br />
파이썬의 <code class="language-plaintext highlighter-rouge">chr()</code>과 같은 동작이다.
길이도 integerField에 변환으로 등록이 가능하다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Smith'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">author</span> <span class="o">=</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">name__startswith</span><span class="o">=</span><span class="n">Chr</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="s">'M'</span><span class="p">))).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">author</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
<span class="n">Margaret</span> <span class="n">Smith</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"age"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"alias"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"goes_by"</span>
<span class="n">FROM</span> <span class="s">"blog_author"</span>
<span class="n">WHERE</span> <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span>
<span class="n">LIKE</span> <span class="n">REPLACE</span><span class="p">(</span><span class="n">REPLACE</span><span class="p">(</span><span class="n">REPLACE</span><span class="p">((</span><span class="n">CHAR</span><span class="p">(</span><span class="mi">77</span><span class="p">)),</span> <span class="s">'</span><span class="se">\'</span><span class="s">, '</span>\\<span class="s">'), '</span><span class="o">%</span><span class="s">', '</span>\<span class="o">%</span><span class="s">'), '</span><span class="n">_</span><span class="s">', '</span>\<span class="n">_</span><span class="s">') || '</span><span class="o">%</span><span class="s">' ESCAPE '</span>\<span class="s">'
</span></code></pre></div></div>

<h3 id="concat">Concat</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Concat</span><span class="p">(</span><span class="o">*</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>두 개 이상의 텍스트 필드나 표현식 목록을 받고, 연결된 텍스트를 리턴한다.
<code class="language-plaintext highlighter-rouge">TextField()</code>와 <code class="language-plaintext highlighter-rouge">CharField()</code>를 연결하려면 <code class="language-plaintext highlighter-rouge">output_field()</code>가 <code class="language-plaintext highlighter-rouge">TextField()</code>이어야 함을 Django에 지정해주어야 한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">CharField</span><span class="p">,</span> <span class="n">Value</span> <span class="k">as</span> <span class="n">V</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Concat</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Smith'</span><span class="p">,</span> <span class="n">goes_by</span><span class="o">=</span><span class="s">'Maggie'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">author</span> <span class="o">=</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>     <span class="n">screen_name</span><span class="o">=</span><span class="n">Concat</span><span class="p">(</span>
<span class="p">...</span>         <span class="s">'name'</span><span class="p">,</span> <span class="n">V</span><span class="p">(</span><span class="s">' ('</span><span class="p">),</span> <span class="s">'goes_by'</span><span class="p">,</span> <span class="n">V</span><span class="p">(</span><span class="s">')'</span><span class="p">),</span>
<span class="p">...</span>         <span class="n">output_field</span><span class="o">=</span><span class="n">CharField</span><span class="p">()</span>
<span class="p">...</span>     <span class="p">)</span>
<span class="p">...</span> <span class="p">).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">author</span><span class="p">.</span><span class="n">screen_name</span><span class="p">)</span>
<span class="n">Margaret</span> <span class="n">Smith</span> <span class="p">(</span><span class="n">Maggie</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"age"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"alias"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"goes_by"</span><span class="p">,</span>
       <span class="n">COALESCE</span><span class="p">(</span><span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span> <span class="p">)</span> <span class="o">||</span>
         <span class="n">COALESCE</span><span class="p">(</span><span class="n">COALESCE</span><span class="p">(</span> <span class="p">(,</span> <span class="p">)</span> <span class="o">||</span>
         <span class="n">COALESCE</span><span class="p">(</span><span class="n">COALESCE</span><span class="p">(</span><span class="s">"blog_author"</span><span class="p">.</span><span class="s">"goes_by"</span><span class="p">,</span> <span class="p">)</span> <span class="o">||</span>
         <span class="n">COALESCE</span><span class="p">(),</span> <span class="p">),</span> <span class="p">),</span>
         <span class="p">)</span> <span class="n">AS</span> <span class="s">"screen_name"</span>
<span class="n">FROM</span> <span class="s">"blog_author"</span>
</code></pre></div></div>

<h3 id="left">Left</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Left</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>텍스트 필드나 표현식에서 앞에서부터 <strong>length</strong>만큼의 문자열을 반환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Left</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Smith'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">author</span> <span class="o">=</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">first_initial</span><span class="o">=</span><span class="n">Left</span><span class="p">(</span><span class="s">'name'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">author</span><span class="p">.</span><span class="n">first_initial</span><span class="p">)</span>
<span class="n">Ma</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"age"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"alias"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"goes_by"</span><span class="p">,</span>
       <span class="n">SUBSTR</span><span class="p">(</span><span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"first_initial"</span>
<span class="n">FROM</span> <span class="s">"blog_author"</span>
</code></pre></div></div>

<h3 id="length">Length</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Length</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>단일 텍스트 필드나 표현식을 받거, 문자 길이를 리턴한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Length</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Smith'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">author</span> <span class="o">=</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">name_length</span><span class="o">=</span><span class="n">Length</span><span class="p">(</span><span class="s">'name'</span><span class="p">),</span>
<span class="p">...</span>    <span class="n">goes_by_length</span><span class="o">=</span><span class="n">Length</span><span class="p">(</span><span class="s">'goes_by'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">author</span><span class="p">.</span><span class="n">name_length</span><span class="p">,</span> <span class="n">author</span><span class="p">.</span><span class="n">goes_by_length</span><span class="p">)</span>
<span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"age"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"alias"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"goes_by"</span><span class="p">,</span>
       <span class="n">LENGTH</span><span class="p">(</span><span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"name_length"</span><span class="p">,</span>
       <span class="n">LENGTH</span><span class="p">(</span><span class="s">"blog_author"</span><span class="p">.</span><span class="s">"goes_by"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"goes_by_length"</span>
<span class="n">FROM</span> <span class="s">"blog_author"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">CharField</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">CharField</span><span class="p">.</span><span class="n">register_lookup</span><span class="p">(</span><span class="n">Length</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="c1"># Get authors whose name is longer than 7 characters
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">authors</span> <span class="o">=</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">name__length__gt</span><span class="o">=</span><span class="mi">7</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="lower">Lower</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Lower</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>단일 텍스트 필드나 표현식을 받아서, 소문자를 리턴한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Lower</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Smith'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">author</span> <span class="o">=</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">name_lower</span><span class="o">=</span><span class="n">Lower</span><span class="p">(</span><span class="s">'name'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">author</span><span class="p">.</span><span class="n">name_lower</span><span class="p">)</span>
<span class="n">margaret</span> <span class="n">smith</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"age"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"alias"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"goes_by"</span><span class="p">,</span>
       <span class="n">LOWER</span><span class="p">(</span><span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"name_lower"</span>
<span class="n">FROM</span> <span class="s">"blog_author"</span>
</code></pre></div></div>

<h3 id="lpad">LPad</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LPad</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">fill_text</span><span class="o">=</span><span class="n">Value</span><span class="p">(</span><span class="s">''</span><span class="p">),</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>주어진 텍스트 필드나 표현식의 값의 length 길이가 되도록 왼쪽부터 ‘fill_text’값을 채워서 리턴한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">Value</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">LPad</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'John'</span><span class="p">,</span> <span class="n">alias</span><span class="o">=</span><span class="s">'j'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">LPad</span><span class="p">(</span><span class="s">'name'</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">Value</span><span class="p">(</span><span class="s">'abc'</span><span class="p">)))</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">alias</span><span class="o">=</span><span class="s">'j'</span><span class="p">).</span><span class="n">name</span><span class="p">)</span>
<span class="n">abcaJohn</span>
</code></pre></div></div>

<h3 id="ltrim">LTrim</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LTrim</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Trim</code>과 비슷하지만, 선행 공백만 제거한다.</p>

<h3 id="ord">Ord</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Ord</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>단일 텍스트 필드나 표현식을 받고, 해당 표현식의 첫 문자의 유니 코드 포인트 값을 리턴한다.<br />
파이썬의 <code class="language-plaintext highlighter-rouge">ord()</code>와 같은 동작이지만, 두 문자 이상이어도 예외가 발생하지 않는다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Ord</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Smith'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">author</span> <span class="o">=</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">name_code_point</span><span class="o">=</span><span class="n">Ord</span><span class="p">(</span><span class="s">'name'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">author</span><span class="p">.</span><span class="n">name_code_point</span><span class="p">)</span>
<span class="mi">77</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"age"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"alias"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"goes_by"</span><span class="p">,</span>
       <span class="n">UNICODE</span><span class="p">(</span><span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"name_code_point"</span>
<span class="n">FROM</span> <span class="s">"blog_author"</span>
</code></pre></div></div>

<h3 id="repeat">Repeat</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Repeat</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>주어진 텍스트 필드나 표현식을 number 횟수만큼 반환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Repeat</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'John'</span><span class="p">,</span> <span class="n">alias</span><span class="o">=</span><span class="s">'j'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">Repeat</span><span class="p">(</span><span class="s">'name'</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">alias</span><span class="o">=</span><span class="s">'j'</span><span class="p">).</span><span class="n">name</span><span class="p">)</span>
<span class="n">JohnJohnJohn</span>
</code></pre></div></div>

<h3 id="replace">Replace</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Replace</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">replacement</span><span class="o">=</span><span class="n">Value</span><span class="p">(</span><span class="s">''</span><span class="p">),</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>‘expression’의 ‘text’부분을 ‘replacement’으로 변경한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">Value</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Replace</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Johnson'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Smith'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">Replace</span><span class="p">(</span><span class="s">'name'</span><span class="p">,</span> <span class="n">Value</span><span class="p">(</span><span class="s">'Margaret'</span><span class="p">),</span> <span class="n">Value</span><span class="p">(</span><span class="s">'Margareth'</span><span class="p">)))</span>
<span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">values</span><span class="p">(</span><span class="s">'name'</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">QuerySet</span> <span class="p">[{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'Margareth Johnson'</span><span class="p">},</span> <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'Margareth Smith'</span><span class="p">}]</span><span class="o">&gt;</span>
</code></pre></div></div>

<h3 id="reverse">Reverse</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Reverse</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>해당 표현식을 역순으로 리턴한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Reverse</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Smith'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">author</span> <span class="o">=</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">backward</span><span class="o">=</span><span class="n">Reverse</span><span class="p">(</span><span class="s">'name'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">author</span><span class="p">.</span><span class="n">backward</span><span class="p">)</span>
<span class="n">htimS</span> <span class="n">teragraM</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"age"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"alias"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"goes_by"</span><span class="p">,</span>
       <span class="n">REVERSE</span><span class="p">(</span><span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"backward"</span>
<span class="n">FROM</span> <span class="s">"blog_author"</span>
</code></pre></div></div>

<h3 id="right">Right</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Right</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>텍스트 필드나 표현식의 마지막 문자를 length 길이만큼 반환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Right</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Smith'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">author</span> <span class="o">=</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">last_letter</span><span class="o">=</span><span class="n">Right</span><span class="p">(</span><span class="s">'name'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">author</span><span class="p">.</span><span class="n">last_letter</span><span class="p">)</span>
<span class="n">h</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"age"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"alias"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"goes_by"</span><span class="p">,</span>
       <span class="n">SUBSTR</span><span class="p">(</span><span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="n">AS</span> <span class="s">"last_letter"</span>
<span class="n">FROM</span> <span class="s">"blog_author"</span>
</code></pre></div></div>

<h3 id="rpad">RPad</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RPad</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">fill_text</span><span class="o">=</span><span class="n">Value</span><span class="p">(</span><span class="s">''</span><span class="p">),</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">LPad</code>와 반대</p>

<h3 id="rtrim">RTrim</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RTrim</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>‘Trim’과 비슷하지만, 후행 공백만 제거한다.</p>

<h3 id="strindex">StrIndex</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">StrIndex</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">substring</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>‘string’에서 ‘substring’이 발생한 위치의 인덱스를 반환(1부터 시작)한다.<br />
찾지 못하면 0을 반환한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">Value</span> <span class="k">as</span> <span class="n">V</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">StrIndex</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Smith'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Smith, Margaret'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Jackson'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Jackson'</span><span class="p">).</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>     <span class="n">smith_index</span><span class="o">=</span><span class="n">StrIndex</span><span class="p">(</span><span class="s">'name'</span><span class="p">,</span> <span class="n">V</span><span class="p">(</span><span class="s">'Smith'</span><span class="p">))</span>
<span class="p">...</span> <span class="p">).</span><span class="n">get</span><span class="p">().</span><span class="n">smith_index</span>
<span class="mi">0</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"age"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"alias"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"goes_by"</span><span class="p">,</span>
       <span class="n">INSTR</span><span class="p">(</span><span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span> <span class="n">Smith</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"smith_index"</span>
<span class="n">FROM</span> <span class="s">"blog_author"</span>
<span class="n">WHERE</span> <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span> <span class="o">=</span> <span class="n">Margaret</span> <span class="n">Jackson</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Smith, Margaret'</span><span class="p">).</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>     <span class="n">smith_index</span><span class="o">=</span><span class="n">StrIndex</span><span class="p">(</span><span class="s">'name'</span><span class="p">,</span> <span class="n">V</span><span class="p">(</span><span class="s">'Marga'</span><span class="p">))</span>
<span class="p">...</span> <span class="p">).</span><span class="n">get</span><span class="p">().</span><span class="n">smith_index</span>
<span class="mi">8</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">authors</span> <span class="o">=</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span>
<span class="p">...</span>    <span class="n">smith_index</span><span class="o">=</span><span class="n">StrIndex</span><span class="p">(</span><span class="s">'name'</span><span class="p">,</span> <span class="n">V</span><span class="p">(</span><span class="s">'Smith'</span><span class="p">))</span>
<span class="p">...</span> <span class="p">).</span><span class="nb">filter</span><span class="p">(</span><span class="n">smith_index__gt</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">QuerySet</span> <span class="p">[</span><span class="o">&lt;</span><span class="n">Author</span><span class="p">:</span> <span class="n">Margaret</span> <span class="n">Smith</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">Author</span><span class="p">:</span> <span class="n">Smith</span><span class="p">,</span> <span class="n">Margaret</span><span class="o">&gt;</span><span class="p">]</span><span class="o">&gt;</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"age"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"alias"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"goes_by"</span><span class="p">,</span>
       <span class="n">INSTR</span><span class="p">(</span><span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span> <span class="n">Smith</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"smith_index"</span>
<span class="n">FROM</span> <span class="s">"blog_author"</span>
<span class="n">WHERE</span> <span class="n">INSTR</span><span class="p">(</span><span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span> <span class="n">Smith</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span>
</code></pre></div></div>

<h3 id="substr">Substr</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Substr</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>‘expression’의 pos에서부터 length 길이의 문자열을 리턴한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Lower</span><span class="p">,</span> <span class="n">Substr</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Smith'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">alias</span><span class="o">=</span><span class="n">Lower</span><span class="p">(</span><span class="n">Substr</span><span class="p">(</span><span class="s">'name'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)))</span>
<span class="mi">1</span>    <span class="c1"># 적용된 row 수
</span><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Smith'</span><span class="p">).</span><span class="n">alias</span><span class="p">)</span>
<span class="n">marga</span>
</code></pre></div></div>

<h3 id="trim">Trim</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Trim</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>선,후행 공백을 제거 한 텍스트 필드나 표현식을 리턴한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Trim</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'  John  '</span><span class="p">,</span> <span class="n">alias</span><span class="o">=</span><span class="s">'j'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">Trim</span><span class="p">(</span><span class="s">'name'</span><span class="p">))</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">alias</span><span class="o">=</span><span class="s">'j'</span><span class="p">).</span><span class="n">name</span><span class="p">)</span>
<span class="n">John</span>
</code></pre></div></div>

<h3 id="upper">Upper</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Upper</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="o">**</span><span class="n">extra</span><span class="p">)</span>
</code></pre></div></div>

<p>텍스트 필드나 표현식을 받아서 대문자로 리턴한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">django.db.models.functions</span> <span class="kn">import</span> <span class="n">Upper</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Margaret Smith'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">author</span> <span class="o">=</span> <span class="n">Author</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">name_upper</span><span class="o">=</span><span class="n">Upper</span><span class="p">(</span><span class="s">'name'</span><span class="p">)).</span><span class="n">get</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">author</span><span class="p">.</span><span class="n">name_upper</span><span class="p">)</span>
<span class="n">MARGARET</span> <span class="n">SMITH</span>

<span class="c1"># Query
</span><span class="n">SELECT</span> <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"id"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"age"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"alias"</span><span class="p">,</span>
       <span class="s">"blog_author"</span><span class="p">.</span><span class="s">"goes_by"</span><span class="p">,</span>
       <span class="n">UPPER</span><span class="p">(</span><span class="s">"blog_author"</span><span class="p">.</span><span class="s">"name"</span><span class="p">)</span> <span class="n">AS</span> <span class="s">"name_upper"</span>
<span class="n">FROM</span> <span class="s">"blog_author"</span>
</code></pre></div></div>

<h2 id="윈도우-함수">윈도우 함수</h2>

<p>나중에 필요할때 찾아 살펴보기</p>
:ET