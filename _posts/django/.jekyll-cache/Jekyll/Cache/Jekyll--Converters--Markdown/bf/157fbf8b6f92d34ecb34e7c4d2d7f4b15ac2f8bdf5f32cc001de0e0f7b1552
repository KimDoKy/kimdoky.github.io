I"Z0<blockquote>
  <p><a href="https://www.feldroy.com/books/two-scoops-of-django-3-x">Two Scoops of Django 3.x</a></p>
</blockquote>

<hr />

<p>다른 프레임워크와 비교해서 Django의 장점 → Admin</p>

<h2 id="211-its-not-for-end-users">21.1 It’s Not for End Users</h2>

<p>Django의 Admin은 최종 사용자가 아니라 사이트 관리자를 위한 기능입니다.</p>

<p>일반 사용자를 위한 기능으로 확장은 가능하지만, 애초 목적이 다르기 때문에 권장하지 않습니다.</p>

<h2 id="212-admin-customization-vs-new-views">21.2 Admin Customization vs. New Views</h2>

<p>일반적으론 깊은 수준까지 커스터마이징할 필요가 없습니다.</p>

<p>커스터마이징보다 목적에 부합하는 단순한 뷰나 폼을 새로 만드는 것이 나을 수도 있습니다.</p>

<h2 id="213-viewing-string-representations-of-objects">21.3 Viewing String Representations of Objects</h2>

<p>Django Admin에서 아무런 설정을 하지 않는다면 <code class="language-plaintext highlighter-rouge">&lt;Model_name&gt; Object</code>로 표기됩니다.</p>

<h3 id="2131-using-__str__">21.3.1 Using <code class="language-plaintext highlighter-rouge">__str__()</code></h3>

<p><code class="language-plaintext highlighter-rouge">__str__()</code>는 <code class="language-plaintext highlighter-rouge">str()</code> 을 호출할 때마다 호출됩니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="k">class</span> <span class="nc">IceCreamBar</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="p">...</span>
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">name</span>
</code></pre></div></div>

<h3 id="2132-using-list_display">21.3.2 Using <code class="language-plaintext highlighter-rouge">list_display</code></h3>

<p>모델 객체의 필드들을 표기하려면 <code class="language-plaintext highlighter-rouge">lsit_display</code>  를 이용하세요.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">IceCreamBar</span>

<span class="o">@</span><span class="n">admin</span><span class="p">.</span><span class="n">register</span><span class="p">(</span><span class="n">IceCreamBar</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">IceCreamBarModelAdmin</span><span class="p">(</span><span class="n">admin</span><span class="p">.</span><span class="n">ModelAdmin</span><span class="p">):</span>
       <span class="n">list_display</span> <span class="o">=</span> <span class="p">(</span><span class="s">'name'</span><span class="p">,</span> <span class="s">'shell'</span><span class="p">,</span> <span class="s">'filling'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="214-adding-callables-to-modeladmin-classes">21.4 Adding Callables to ModelAdmin Classes</h2>

<p>함수와 클래스를 이용해 <code class="language-plaintext highlighter-rouge">django.contrib.admin.ModelAdmin</code> 클래스에 기능을 추가할 수 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># icecreambars/admin.py
</span><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">reverse</span><span class="p">,</span> <span class="n">NoReverseMatch</span> 
<span class="kn">from</span> <span class="nn">django.utils.html</span> <span class="kn">import</span> <span class="n">format_html</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">IceCreamBar</span>

<span class="o">@</span><span class="n">admin</span><span class="p">.</span><span class="n">register</span><span class="p">(</span><span class="n">IceCreamBar</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">IceCreamBarModelAdmin</span><span class="p">(</span><span class="n">admin</span><span class="p">.</span><span class="n">ModelAdmin</span><span class="p">):</span>
       <span class="n">list_display</span> <span class="o">=</span> <span class="p">(</span><span class="s">'name'</span><span class="p">,</span> <span class="s">'shell'</span><span class="p">,</span> <span class="s">'filling'</span><span class="p">)</span>
       <span class="n">readonly_fields</span> <span class="o">=</span> <span class="p">(</span><span class="s">'show_url'</span><span class="p">,)</span>

    <span class="k">def</span> <span class="nf">show_url</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">):</span>
        <span class="n">url</span> <span class="o">=</span> <span class="n">reverse</span><span class="p">(</span><span class="s">'icecreambars:ice_cream_bar_detail'</span><span class="p">,</span> 
            <span class="n">kwargs</span><span class="o">=</span><span class="p">{</span><span class="s">'pk'</span><span class="p">:</span><span class="n">instance</span><span class="p">.</span><span class="n">pk</span><span class="p">})</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">format_html</span><span class="p">(</span><span class="s">"""&lt;a href="{0}"&gt;{0}&lt;/a&gt;"""</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span> 
        <span class="k">return</span> <span class="n">response</span>

    <span class="n">show_url</span><span class="p">.</span><span class="n">short_description</span> <span class="o">=</span> <span class="s">'Ice Cream Bar URL'</span>
</code></pre></div></div>

<p><img src="/img/post/django/two_scoops/21.4.png" alt="" /></p>

<h2 id="215-be-aware-of-the-complications-of-multiuser-environments">21.5 Be Aware of the Complications of Multiuser Environments</h2>

<p>Django Admin에서 staff / admin 수준의 접근 권한의 사용자의 수정 기능을 제한하지 않습니다. 관리자가 한명이라면 상관없지만, 여럿이라면 문제가 됩니다.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">list_editable</code> 에 대한 이슈는 해결되었습니다.</p>

  <ul>
    <li><a href="https://code.djangoproject.com/ticket/11313">https://code.djangoproject.com/ticket/11313</a></li>
    <li><a href="https://code.djangoproject.com/ticket/17118">https://code.djangoproject.com/ticket/17118</a></li>
  </ul>
</blockquote>

<h2 id="216-djangos-admin-documentation-generator">21.6 Django’s Admin Documentation Generator</h2>

<p><a href="">chap25. Documentation: Be Obsessed</a>에 문서화 도구들이 생기기 전부터 Django는 <code class="language-plaintext highlighter-rouge">django.contrib.admindocs</code> 라는 패키지를 제공하고 있었고, 여전히 유용합니다.</p>

<p>모델, 뷰, 커스텀 템플릿 태그, 커스텀 필드 같은 프로젝트 컴퍼넌트의 독스트링을 보여주기 때문에, 프로젝트 리뷰 차원에서도 매우 유용합니다.</p>

<h3 id="사용법">사용법</h3>

<ol>
  <li>pip를 통해 <code class="language-plaintext highlighter-rouge">docutils</code>  설치 (<code class="language-plaintext highlighter-rouge">pip install docutils</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">INSTALLED_APPS</code> 에 <code class="language-plaintext highlighter-rouge">django.contrib.admindocs</code> 를 추가</li>
  <li><code class="language-plaintext highlighter-rouge">path('admin/doc/', include('django.contrib.admindocs.urls'))</code> 를 root URLConf에 추가. <code class="language-plaintext highlighter-rouge">admin/</code> 보다 이전에 위치하게 해야 <code class="language-plaintext highlighter-rouge">admin/</code> 에 영향을 받지 않습니다.</li>
  <li>Optional: admindocs의 북마클릿을 이용하려면 <code class="language-plaintext highlighter-rouge">XViewMiddleware</code> 가 설치되어 있어야 합니다.
    <ul>
      <li>북마클릿 ?
    - <a href="https://docs.djangoproject.com/en/3.2/ref/contrib/admin/admindocs/">https://docs.djangoproject.com/en/3.2/ref/contrib/admin/admindocs/</a>
    - <a href="">chap25. Documentation: Be Obsessed</a></li>
    </ul>
  </li>
</ol>

<h2 id="217-using-custom-skins-with-the-django-admin">21.7 Using Custom Skins With the Django Admin</h2>

<ul>
  <li>django.contrib.admin 스킨들
    <ul>
      <li>django-grappelli: 안정적, 친근한 스타일</li>
      <li>django-suit: 트위터 부트스트랩 프론트엔드를 기반으로 제작</li>
      <li>jet-admin: API 기반 Admin Panel 프레임워크</li>
      <li><a href="https://djangopackages.org/grids/g/admin-styling/">https://djangopackages.org/grids/g/admin-styling/</a></li>
    </ul>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">django.contrib.admin</code> 의 특이한 구조에 맞는 불가사한 코드가 있어서 Django의 테마를 만드는 것은 쉽지만은 않습니다.</p>

<h3 id="2171-evaluation-point-documentation-is-everything">21.7.1 Evaluation Point: Documentation is Everything</h3>

<p>프로젝트에 스킨들을 추가할때는 설치 절차부터 문서의 품질을 꼭 확인해야 합니다.</p>

<h3 id="2172-write-tests-for-any-admin-extensions-you-create">21.7.2 Write Tests for Any Admin Extensions You Create</h3>

<p>어드민 스킨이 어디까지 확장할 수 있는지 주의해야 합니다.</p>

<ul>
  <li>기본으로 제공되는 <code class="language-plaintext highlighter-rouge">django.contrib.admin</code> 의 기능이 커스텀 스킨에서는 깨지거나 작동하지 않을 수도 있음</li>
</ul>

<p>커스텀 스킨을 이용한다면 어드민에 대한 테스트 케이스를 작성해야 합니다.</p>

<p>초반에 시간이 좀 걸리더라도 문제가 생기면 효과는 확실합니다.</p>

<ul>
  <li><a href="">Chap24. Testing Stinks and Is a Waste of Money!</a></li>
</ul>

<h2 id="21-8-secure-the-django-admin">21. 8 Secure the Django Admin</h2>

<h3 id="2181-change-the-default-admin-url">21.8.1 Change the Default Admin URL</h3>

<p>기본 admin url을 변경하세요.</p>

<h3 id="2182-use-django-admin-honeypot">21.8.2 Use django-admin-honeypot</h3>

<p><code class="language-plaintext highlighter-rouge">django-admin-honeypot</code>  는 가짜 어드민 로그인 페이지를 보여주고, 로그인을 시도하는 사람에 대한 정보를 기록해줍니다.</p>

<ul>
  <li>https://github.com/dmpayton/django-admin-honeypot</li>
</ul>

<h3 id="2183-only-allow-admin-access-via-https">21.8.3 Only Allow Admin Access via HTTPS</h3>

<p>Admin은 HTTPS를 반드시 사용하세요. Admin에만 적용하는 것보다는 사이트 전체에 HTTPS를 적용하는 것이 훨씬 쉽습니다.</p>

<ul>
  <li><a href="">Chap 28.6: HTTPS Everywhere</a></li>
</ul>

<h3 id="2184-limit-admin-access-based-on-ip">21.8.4 Limit Admin Access Based on IP</h3>

<p>특정 IP만 Admin에 접근을 허용하도록 웹서버를 구성하세요.</p>

<ul>
  <li><a href="http://tech.marksblogg.com/django-admin-logins.html">http://tech.marksblogg.com/django-admin-logins.html</a></li>
</ul>

<h2 id="219-securing-the-admin-docs">21.9 Securing the Admin Docs</h2>

<p>Django Admin 문서는 프로젝트가 어떻게 구성되었는지 제공하기 때문에 더욱 안전하게 유지해야 합니다.</p>

<ul>
  <li>Admin 문서 URL을 변경(/admin/doc/을 다른 url로 변경)</li>
  <li>HTTPS 만 허용</li>
  <li>IP를 통해 접근 제어</li>
</ul>

<h2 id="2110-summary">21.10 Summary</h2>
:ET