I"+<h1 id="django-rest-framework---requests">Django REST Framework - Requests</h1>

<hr />
<p><em>“If you’re doing REST-based web service stuff … you should ignore request.POST.” <br />
“REST 기반 웹 서비스 작업을 하고있다면 … POST 요청을 무시해야한다.”<br />
— Malcom Tredinnick</em></p>

<h2 id="requests">Requests</h2>

<p>REST 프레임워크의 <code class="language-plaintext highlighter-rouge">Request</code> 클래스는 표준 <code class="language-plaintext highlighter-rouge">HttpRequest</code>를 확장하여 REST 프레임워크의 유연한 request 구문 분석 및 요청 인증을 지원합니다.</p>

<h2 id="request-parsing">Request parsing</h2>
<p>REST 프레임워크의 Request 객체는 유연한 request 구문 분석 기능을 제공하므로 사용자가 일반적으로 form 데이터를 처리하는 것과 같은 방식으로 JSON 데이터 또는 다른 미디어 유형으로 요청을 처리 할 수 ​​있습니다.</p>

<h3 id="data">.data</h3>
<p><code class="language-plaintext highlighter-rouge">request.data</code>는 요청 본문의 구문 분석 된 내용을 반환합니다. 이는 다음을 제외하고 표준 <code class="language-plaintext highlighter-rouge">request.POST</code> 및 <code class="language-plaintext highlighter-rouge">request.FILES</code> 속성과 유사합니다.</p>

<ul>
  <li>여기에는 파일과 파일이 아닌 입력을 포함하여 파싱 된 모든 내용이 포함됩니다.</li>
  <li><code class="language-plaintext highlighter-rouge">POST</code>가 아닌 <code class="language-plaintext highlighter-rouge">HTTP</code>메소드의 컨텐츠 분석을 지원합니다. 즉, <code class="language-plaintext highlighter-rouge">PUT</code>과 <code class="language-plaintext highlighter-rouge">PATCH</code> 요청의 컨텐츠에 액서스 할 수 있습니다.</li>
  <li>이는 form 테이터를 지원하는 것보다 REST 프레임워크의 유연한 request 구문 분석을 지원합니다. 예를 들어, 들어오는 form 데이터를 처리하는 것과 같은 방식으로 들어오는 JSON 데이터를 처리 할 수 있습니다.
더 자세한 내용은 <a href="http://www.django-rest-framework.org/api-guide/parsers/">parsers documentation</a>을 참조하세요.</li>
</ul>

<h3 id="query_params">.query_params</h3>
<p><code class="language-plaintext highlighter-rouge">request.query_params</code>는 <code class="language-plaintext highlighter-rouge">request.GET</code>에 대해 보다 정확하게 명명 된 동의어입니다.<br />
코드 내에서 명확성을 위해 Django의 표준 <code class="language-plaintext highlighter-rouge">request.GET</code> 대신 <code class="language-plaintext highlighter-rouge">request.query_params</code>를 사용하는 것이 좋습니다. 이렇게 하면  코드베이스를 보다 정확하고 명확하게 유지할  수 있습니다. 모든 HTTP 메소드 유형에는 <code class="language-plaintext highlighter-rouge">GET</code>request 뿐만 아니라 쿼리 parameter가 포함될 수 있습니다.</p>

<h3 id="parsers">.parsers</h3>
<p><code class="language-plaintext highlighter-rouge">APIView</code> 클래스나 <code class="language-plaintext highlighter-rouge">@api_view</code> 데코레이터는 뷰에 설정 된 <code class="language-plaintext highlighter-rouge">parser_classes</code>나 <code class="language-plaintext highlighter-rouge">DEFAULT_PARSER_CLASSES</code>설정에 따라 속성이 자동으로 <code class="language-plaintext highlighter-rouge">Parser</code> 인스턴스 목록으로 설정되도록 합니다.<br />
일반적으로 이 속성에 액서스 할 필요는 없습니다.</p>

<hr />
<p><strong>NOTE</strong>: 클라이언트가 조작 된 콘텐츠를 보낸 경우 <code class="language-plaintext highlighter-rouge">request.data</code>에 액서스하면  <code class="language-plaintext highlighter-rouge">ParserError</code>가 발생할 수 있습니다. 기본적으로 REST 프레임워크의 <code class="language-plaintext highlighter-rouge">APIView</code> 클래스나 <code class="language-plaintext highlighter-rouge">@api_view</code>데코레이터는 오류를 포착하고, <code class="language-plaintext highlighter-rouge">400 Bad Request</code> 응답을 반환합니다.<br />
클라이언트가 파싱 할 수 없는 content-type을 가진 request를 보내면 <code class="language-plaintext highlighter-rouge">UnsuppoertedMediaType</code>예외가 발생합니다. 이 예외는 기본적으로 포착되어 지원되지 않는 미디어 유형 응답을 반환합니다.</p>

<hr />

<h2 id="content-negotiation">Content negotiation</h2>
<p>request는 콘텐츠 협상 단계의 결과를 결정할 수 있는 몇가지 속성을 제공합니다. 이를 통해 다양한 미디어 유형에 대해 다른 serializer 스키마를 선택하는 것과 같은 동작을 구현할 수 있습니다.</p>

<h3 id="accepted_renderer">.accepted_renderer</h3>
<p>renderer 인스턴스는 컨텐츠 협상 단계에서 선택 된 인스턴스입니다.</p>

<h3 id="accepted_media_type">.accepted_media_type</h3>
<p>내용 협상 단계에서 수락 한 미디어 유형을 나타내는 문자열입니다.</p>

<hr />

<h2 id="authentication-입증">Authentication (입증)</h2>
<p>REST 프레임워크는 다음과 같은 기능을 제공하는 유연한 request 별 인증을 제공합니다.</p>

<ul>
  <li>API의 다른 부분에 대해 서로 다른 인증 정책을 사용합니다.</li>
  <li>다중 인증 정책의 사용을 지원합니다.</li>
  <li>들어오는 request와 관련된 사용자와 토큰 정보를 제공합니다.</li>
</ul>

<h3 id="user">.user</h3>
<p><code class="language-plaintext highlighter-rouge">request.user</code>는 일반적으로 <code class="language-plaintext highlighter-rouge">django.contrib.auth.models.User</code>의 인스턴스를 반환하지만 동작은 사용되는 인증 정책에 따라 다릅니다.<br />
request이 인증되지 않은 경우 request.user의 기본값은 <code class="language-plaintext highlighter-rouge">django.contrib.auth.models.AnonymousUser</code>의 인스턴스입니다.
자세한 내용은 <a href="http://www.django-rest-framework.org/api-guide/authentication/">authentication documentation</a>을 참조하세요.</p>

<h3 id="auth">.auth</h3>
<p><code class="language-plaintext highlighter-rouge">request.auth</code>는 추가 인증 컨텍스트를 리턴합니다. <code class="language-plaintext highlighter-rouge">request.auth</code>의 정확한 작동은 사용되는 인증 정책에 따라 다르지만 대개 request가 인증 된 토큰의 인스턴스 일 수 있습니다.<br />
request가 인증되지 않았거나 추가 컨텍스트가 없는 경우, <code class="language-plaintext highlighter-rouge">request.auth</code>의 기본값은 없습니다.<br />
자세한 내용은 <a href="http://www.django-rest-framework.org/api-guide/authentication/">authentication documentation</a>을 참조하세요.</p>

<h3 id="authenticators">.authenticators</h3>
<p><code class="language-plaintext highlighter-rouge">APIView</code> 클래스나 <code class="language-plaintext highlighter-rouge">@api_view</code>데코레이터는 뷰에 설정된 <code class="language-plaintext highlighter-rouge">authentication_classes</code>나 <code class="language-plaintext highlighter-rouge">DEFAULT_AUTHENTICATORS</code> 설정에 따라 속성이 자동으로 <code class="language-plaintext highlighter-rouge">Authentication</code>인스턴스 목록으로 설정되도록 합니다.<br />
일반적으로 이 속성에 액서스 할 필요는 없습니다.</p>

<hr />

<h2 id="browser-enhancements">Browser enhancements</h2>
<p>REST 프레임워크는 브라우저 기반의 <code class="language-plaintext highlighter-rouge">PUT</code>, <code class="language-plaintext highlighter-rouge">PATCH</code>, <code class="language-plaintext highlighter-rouge">DELETE</code> form과 같은 몇 가지 브라우저 개선 사항을 지원합니다.</p>

<h3 id="method">.method</h3>
<p><code class="language-plaintext highlighter-rouge">request.method</code>는 request의 HTTP 메소드의 <strong>uppercased</strong>(대문자)로 된 문자열 표현을 리턴합니다.<br />
브라우저 기반의 <code class="language-plaintext highlighter-rouge">PUT</code>, <code class="language-plaintext highlighter-rouge">PATCH</code> 및 <code class="language-plaintext highlighter-rouge">DELETE</code> form이 투명하게 지원됩니다.<br />
자세한 내용은 <a href="http://www.django-rest-framework.org/topics/browser-enhancements/">browser enhancements documentation</a>을 참조하세요.</p>

<h3 id="content_type">.content_type</h3>
<p><code class="language-plaintext highlighter-rouge">request.content_type</code>은 HTTP request 본문의 미디어 유형을 나타내는 문자열 객체를 반환하거나 미디어 유형이 제공되지 않은 경우 빈 문자열을 반환합니다.<br />
일반적으로 REST 프레임워크의 기본 request 구문 분석 동작에 의존하므로 일반적으로 request의 콘텐츠 형식에 직접 액서스 할 필요가 없습니다.<br />
request의 콘텐츠 형식에 액서스해야하는 경우 브라우저 기반 non-form 콘텐츠에 대한 투명한 지원을 제공하므로 <code class="language-plaintext highlighter-rouge">request.META.get('HTTP_CONTENT_TYPE')</code>을 사용하는 것보다 <code class="language-plaintext highlighter-rouge">.content_type</code>속성을 사용해야 합니다.<br />
자세한 내용은 <a href="http://www.django-rest-framework.org/topics/browser-enhancements/">browser enhancements documentation</a>을 참조하세요.</p>

<h3 id="stream">.stream</h3>
<p><code class="language-plaintext highlighter-rouge">request.stream</code>은 request 본문의 내용을 나타내는 스트림을 반환합니다.<br />
일반적으로 REST 프레임워크의 기본 request 구문 분석 동작에 의존하므로 대개 request의 콘텐츠에 직접 액세스 할 필요가 없습니다.</p>

<hr />

<h2 id="standard-httprequest-attributes">Standard HttpRequest attributes</h2>
<p>REST 프레임워크의 <code class="language-plaintext highlighter-rouge">request</code>는 Django의 <code class="language-plaintext highlighter-rouge">HttpRequest</code>를 확장하므로 다른 모든 표준 속성과 메소드도 사용할 수 있습니다. 예를 들어, <code class="language-plaintext highlighter-rouge">request.META</code>와 <code class="language-plaintext highlighter-rouge">request.session</code> dict는 정상적으로 사용 가능합니다.<br />
구현 이유로 인해 <code class="language-plaintext highlighter-rouge">Request</code>클래스는 <code class="language-plaintext highlighter-rouge">HttpRequest</code>클래스에 상속하지 않고 대신 <code class="language-plaintext highlighter-rouge">composition</code>을 사용하여 클래스를 확장합니다.</p>
:ET