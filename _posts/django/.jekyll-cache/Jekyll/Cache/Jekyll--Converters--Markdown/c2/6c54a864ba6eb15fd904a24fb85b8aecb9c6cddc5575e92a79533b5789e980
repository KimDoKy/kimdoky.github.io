I":F<h1 id="django-rest-framework---views">Django REST Framework - Views</h1>

<hr />

<p><em>“Django’s class-based views are a welcome departure from the old-style views.”</em></p>

<p><em>“Django의 CBV는 구식 뷰에서 출발하는 것을 환영합니다.”</em></p>

<p><em>— Reinout van Rees</em></p>

<hr />

<h2 id="class-based-views">Class-based Views</h2>
<p>REST 프레임워크는 Django의 <code class="language-plaintext highlighter-rouge">View</code> 클래스를 하위 클래스로 하는 <code class="language-plaintext highlighter-rouge">APIView</code>클래스를 제공합니다.<br />
<code class="language-plaintext highlighter-rouge">APIView</code>클래스는 다음과 같은 방식으로 일반 <code class="language-plaintext highlighter-rouge">View</code>클래스와 다릅니다.</p>

<ul>
  <li>핸들러 메서드에 전달 된 <code class="language-plaintext highlighter-rouge">Request</code>는 Django의 <code class="language-plaintext highlighter-rouge">HttpRequest</code> 인스턴스가 아닌 REST 프레임워크의 <code class="language-plaintext highlighter-rouge">request</code>인스턴스가 됩니다.</li>
  <li>핸들러 메서드는 Django의 <code class="language-plaintext highlighter-rouge">HttpResponse</code> 대신 REST 프레임워크의 <code class="language-plaintext highlighter-rouge">Response</code>를 반환 할 수 있습니다. 뷰는 콘텐츠 협상을 관리하고 <code class="language-plaintext highlighter-rouge">response</code>에서 올바른 렌더러를 설정합니다.</li>
  <li>모든 <code class="language-plaintext highlighter-rouge">APIException</code> 예외가 발견되면 적절한 <code class="language-plaintext highlighter-rouge">response</code>으로 조정됩니다.</li>
  <li>들어오는 request가 인증이 된 request를 핸들러 메서드에 보내기 전에 적절한 권한과 <code class="language-plaintext highlighter-rouge">/</code> 또는 <code class="language-plaintext highlighter-rouge">throttle(제한)</code> 체크를 실행합니다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">APIView</code> 클래스를 사용하는 것은 일반 <code class="language-plaintext highlighter-rouge">View</code>클래스를 사용하는 것과 거의 같습니다. 들어오는 request은 <code class="language-plaintext highlighter-rouge">.get()</code>이나 <code class="language-plaintext highlighter-rouge">.post()</code>와 같은 적절한 핸들러 메서드로 전달됩니다. 또한 API 정책의 다양한 측면을 제어하는 여러 속성을 클래스에 설정 할 수 있습니다.</p>

<p>예를 들어:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">rest_framework.views</span> <span class="kn">import</span> <span class="n">APIView</span>
<span class="kn">from</span> <span class="nn">rest_framework.response</span> <span class="kn">import</span> <span class="n">Response</span>
<span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">authentication</span><span class="p">,</span> <span class="n">permissions</span>

<span class="k">class</span> <span class="nc">ListUsers</span><span class="p">(</span><span class="n">APIView</span><span class="p">):</span>
    <span class="s">"""
    View to list all users in the system.

    * 토큰 인증이 필요합니다.
    * 관리자만 view에 액서스 할 수 있습니다.
    """</span>
    <span class="n">authentication_classes</span> <span class="o">=</span> <span class="p">(</span><span class="n">authentication</span><span class="p">.</span><span class="n">TokenAuthentication</span><span class="p">,)</span>
    <span class="n">permission_classes</span> <span class="o">=</span> <span class="p">(</span><span class="n">permissions</span><span class="p">.</span><span class="n">IsAdminUser</span><span class="p">,)</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="s">"""
        모든 사용자 리스트를 반환합니다.
        """</span>
        <span class="n">usernames</span> <span class="o">=</span> <span class="p">[</span><span class="n">user</span><span class="p">.</span><span class="n">username</span> <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()]</span>
        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">usernames</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="api-policy-attributesapi-정책-속성">API policy attributes(API 정책 속성)</h3>
<p>다음 속성들은 API view의 플러그 가능한 부분을 제어합니다.<br />
<code class="language-plaintext highlighter-rouge">.renderer_classes</code><br />
<code class="language-plaintext highlighter-rouge">.parser_classes</code><br />
<code class="language-plaintext highlighter-rouge">.authentication_classes</code><br />
<code class="language-plaintext highlighter-rouge">.throttle_classes</code><br />
<code class="language-plaintext highlighter-rouge">.permission_classes</code><br />
<code class="language-plaintext highlighter-rouge">.content_negotiation_class</code></p>

<h3 id="api-policy-instantiation-methodsapi-정책-인스턴스화-메서드">API policy instantiation methods(API 정책 인스턴스화 메서드)</h3>
<p>다음 메서드들은 REST 프레임워크에서 다양한 플러그가 가능한 API 정책을 인스턴스화하는데 사용됩니다. 일반적으로 이러한 메서드를 재정의 할 필요는 없습니다.<br />
<code class="language-plaintext highlighter-rouge">.get_renderers(self)</code><br />
<code class="language-plaintext highlighter-rouge">.get_parsers(self)</code><br />
<code class="language-plaintext highlighter-rouge">.get_authenticators(self)</code><br />
<code class="language-plaintext highlighter-rouge">.get_throttles(self)</code><br />
<code class="language-plaintext highlighter-rouge">.get_permissions(self)</code><br />
<code class="language-plaintext highlighter-rouge">.get_content_negotiator(self)</code><br />
<code class="language-plaintext highlighter-rouge">.get_exception_handler(self)</code></p>

<h3 id="api-policy-implementation-methodsapi-정책-구현-방법">API policy implementation methods(API 정책 구현 방법)</h3>
<p>다음 메서드는 핸들러 메서드에 전달하기 전에 호출됩니다.<br />
<code class="language-plaintext highlighter-rouge">.check_permissions(self, request)</code><br />
<code class="language-plaintext highlighter-rouge">.check_throttles(self, request)</code><br />
<code class="language-plaintext highlighter-rouge">.perform_content_negotiation(self, request, force=False)</code></p>

<h3 id="dispatch-methods-파견-메서드">Dispatch methods (파견 메서드)</h3>
<p>다음 메서드는 뷰의 <code class="language-plaintext highlighter-rouge">.dispatch()</code>메서드에 의해 직접 호출됩니다. 이 메서드들은 <code class="language-plaintext highlighter-rouge">.get()</code>, <code class="language-plaintext highlighter-rouge">.post()</code>, <code class="language-plaintext highlighter-rouge">put()</code>, <code class="language-plaintext highlighter-rouge">patch()</code> 및 <code class="language-plaintext highlighter-rouge">.delete()</code>와 같은 핸들러 메서드들을 호출하기 전후에 수행되어야하는 모든 조치들을 수행합니다.</p>

<h4 id="initialself-request-args-kwargs"><code class="language-plaintext highlighter-rouge">.initial(self, request, *args, **kwargs)</code></h4>
<p>핸들러 메서드가 호출되기 전에 발생해야하는 모든 작업을 수행합니다. 이 메서드는 사용 권한 및 제한을 적용하고 콘텐츠 협상을 수행하는데 사용됩니다.<br />
일반적으로 이 메서드를 재정의 할 필요는 없습니다.</p>

<h4 id="handle_exceptionself-exc"><code class="language-plaintext highlighter-rouge">.handle_exception(self, exc)</code></h4>
<p>핸들러 메서드에 의해 버려진 예외는 <code class="language-plaintext highlighter-rouge">Resopnse</code>인스턴스를 반환하거나 예외를 다시 발생시키는 이 메서드로 전달됩니다.<br />
기본 구현에서는 Django의 <code class="language-plaintext highlighter-rouge">Http404</code>와 <code class="language-plaintext highlighter-rouge">PermissionDenied</code>예외 뿐만 아니라 <code class="language-plaintext highlighter-rouge">rest_framework.exceptions.APIXeception</code>의 하위 클래스를 처리하고 적절한 오류 response를 반환합니다.<br />
API에서 반환하는 오류 response를 사용자 정의해야하는 경우 이 메소드를 서브 클래스화해야 합니다.</p>

<h4 id="initialize_requestself-request-args-kwargs"><code class="language-plaintext highlighter-rouge">.initialize_request(self, request, *args, **kwargs)</code></h4>
<p>핸들러 메소드에 전달 된 request 객체가 일반적인 Django <code class="language-plaintext highlighter-rouge">HttpRequest</code>가 아닌 <code class="language-plaintext highlighter-rouge">Request</code>의 인스턴스인지 확인합니다.<br />
일반적으로 이 메서드를 재정의 할 필요는 없습니다.</p>

<h4 id="finalize_responseself-request-response-args-kwargs"><code class="language-plaintext highlighter-rouge">.finalize_response(self, request, response, *args, **kwargs)</code></h4>
<p>핸들러 메서드에서 반환 된 모든 <code class="language-plaintext highlighter-rouge">Response</code>객체가 내용 협상에 의해 결정된 대로 올바른 내용 유형으로 렌더링되도록 합니다.<br />
일반적으로 이 메서드는 재정의 할 필요는 없습니다.</p>

<hr />

<h3 id="function-based-views">Function Based Views</h3>
<p><em>“Saying [that class-based views] is always the superior solution is a mistake.”</em><br />
<em>“[그 클래스 기반의 견해]가 항상 우월한 해결책은 실수라고 말하는 것입니다.”</em></p>

<p><em>— Nick Coghlan</em></p>

<p>REST 프레임워크를 사용하면 일반 FBV로 작업 할 수 있습니다. 그것은 간단한 Django <code class="language-plaintext highlighter-rouge">HttpRequest</code>가 아닌 <code class="language-plaintext highlighter-rouge">Request</code>의 인스턴스를 수신하고 Django <code class="language-plaintext highlighter-rouge">HttpResponse</code> 대신 <code class="language-plaintext highlighter-rouge">response</code>을 리턴 할 수 있도록 FBV를 래핑하는 간단한 데코레이터 세트를 제공하며, request가 처리됩니다.</p>

<h3 id="api_view">@api_view()</h3>
<p><strong>Signature</strong>: <code class="language-plaintext highlighter-rouge">@api_view(http_method_names=['GET'], exclude_from_schema=False)</code><br />
이 기능의 핵심은 <code class="language-plaintext highlighter-rouge">api_view</code>데코레이터(뷰가 응답해야하는 HTTP 메서드 리스트를 사용함)입니다. 예를 들어, 다음은 몇 가지 데이터를 수동으로 반환하는 아주 간단한 view를 작성하는 방법입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">rest_framework.decorators</span> <span class="kn">import</span> <span class="n">api_view</span>

<span class="o">@</span><span class="n">api_view</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">Response</span><span class="p">({</span><span class="s">"message"</span><span class="p">:</span> <span class="s">"Hello, world!"</span><span class="p">})</span>
</code></pre></div></div>
<p>이 뷰는 <a href="http://www.django-rest-framework.org/api-guide/settings/">설정</a>에 지정된 기본 렌더러, 파서, 인증 클래스 등을 사용합니다.<br />
기본적으로 <code class="language-plaintext highlighter-rouge">GET</code>메서드만 허용됩니다. 다른 메서드들은 “405 Method Not Allowed”로 응답합니다. 이 동작을 변경하려면 view에서 허용하는 방법을 지정하세요.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="n">api_view</span><span class="p">([</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">Response</span><span class="p">({</span><span class="s">"message"</span><span class="p">:</span> <span class="s">"Got some data!"</span><span class="p">,</span> <span class="s">"data"</span><span class="p">:</span> <span class="n">request</span><span class="p">.</span><span class="n">data</span><span class="p">})</span>
    <span class="k">return</span> <span class="n">Response</span><span class="p">({</span><span class="s">"message"</span><span class="p">:</span> <span class="s">"Hello, world!"</span><span class="p">})</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">exclude_from_schema</code>인수를 사용하여 API 뷰를 <a href="http://www.django-rest-framework.org/api-guide/schemas/">자동 생성 스키마(auto-generated schema)</a>에서 생략된 것으로 표시 할 수도 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="n">api_view</span><span class="p">([</span><span class="s">'GET'</span><span class="p">],</span> <span class="n">exclude_from_schema</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">api_docs</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="p">...</span>
</code></pre></div></div>

<h3 id="api-policy-decorators">API policy decorators</h3>
<p>기본 설정을 재정의하기 위해 REST 프레임워크는 뷰에 추가 할 수 있는 일련의 추가 데코레이터를 제공합니다. 이들은 <code class="language-plaintext highlighter-rouge">@api_view</code>데코레이터 다음에 와야합니다. 예를 들어, <a href="http://www.django-rest-framework.org/api-guide/throttling/"><code class="language-plaintext highlighter-rouge">throttle</code></a>을 사용하여 특정 사용자가 하루에 한번만 호출 할 수 있도록 뷰를 만들려면 <code class="language-plaintext highlighter-rouge">@thottle_classes</code>데코레이터를 사용하여 <code class="language-plaintext highlighter-rouge">throttle</code> 클래스 목록을 전달하세요.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">rest_framework.decorators</span> <span class="kn">import</span> <span class="n">api_view</span><span class="p">,</span> <span class="n">throttle_classes</span>
<span class="kn">from</span> <span class="nn">rest_framework.throttling</span> <span class="kn">import</span> <span class="n">UserRateThrottle</span>

<span class="k">class</span> <span class="nc">OncePerDayUserThrottle</span><span class="p">(</span><span class="n">UserRateThrottle</span><span class="p">):</span>
        <span class="n">rate</span> <span class="o">=</span> <span class="s">'1/day'</span>

<span class="o">@</span><span class="n">api_view</span><span class="p">([</span><span class="s">'GET'</span><span class="p">])</span>
<span class="o">@</span><span class="n">throttle_classes</span><span class="p">([</span><span class="n">OncePerDayUserThrottle</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">Response</span><span class="p">({</span><span class="s">"message"</span><span class="p">:</span> <span class="s">"Hello for today! See you tomorrow!"</span><span class="p">})</span>
</code></pre></div></div>
<p>이러한 데코레이터는 위에서 설명한 <code class="language-plaintext highlighter-rouge">APIView</code>하위 클래스에 설정된 특성에 해당합니다. 사용 가능한 데코레이터는 다음과 같습니다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@renderer_classes(...)</code></li>
  <li><code class="language-plaintext highlighter-rouge">@parser_classes(...)</code></li>
  <li><code class="language-plaintext highlighter-rouge">@authentication_classes(...)</code></li>
  <li><code class="language-plaintext highlighter-rouge">@throttle_classes(...)</code></li>
  <li><code class="language-plaintext highlighter-rouge">@permission_classes(...)</code></li>
</ul>

<p>이러한 데코레이터 각각은 클래스의 <code class="language-plaintext highlighter-rouge">list</code>나 <code class="language-plaintext highlighter-rouge">tuple</code>인 단일 인수를 취합니다.</p>
:ET